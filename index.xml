<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Dand&#39;s Blog</title>
        <link>https://dandkong.github.io/</link>
        <description>Dand&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 08 Jul 2023 11:24:17 &#43;0800</lastBuildDate>
            <atom:link href="https://dandkong.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Unity开发性能优化总结</title>
    <link>https://dandkong.github.io/unity%E5%BC%80%E5%8F%91%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sat, 08 Jul 2023 11:24:17 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/unity%E5%BC%80%E5%8F%91%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[Unity开发性能优化总结]]></description>
</item>
<item>
    <title>根据Prefab自动生成Lua代码</title>
    <link>https://dandkong.github.io/%E6%A0%B9%E6%8D%AEprefab%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90lua%E4%BB%A3%E7%A0%81/</link>
    <pubDate>Wed, 07 Jun 2023 21:01:30 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E6%A0%B9%E6%8D%AEprefab%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90lua%E4%BB%A3%E7%A0%81/</guid>
    <description><![CDATA[根据Prefab自动生成Lua代码，添加按钮回调，添加组件引用，添加自定义代码。]]></description>
</item>
<item>
    <title>状态同步与帧同步</title>
    <link>https://dandkong.github.io/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5/</link>
    <pubDate>Thu, 11 May 2023 21:35:54 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5/</guid>
    <description><![CDATA[简要概括帧同步，状态同步和状态帧同步的原理以及优缺点]]></description>
</item>
<item>
    <title>Lua知识点总结</title>
    <link>https://dandkong.github.io/lua%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</link>
    <pubDate>Tue, 11 Apr 2023 21:40:59 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/lua%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[Lua知识点总结]]></description>
</item>
<item>
    <title>STL总结</title>
    <link>https://dandkong.github.io/stl%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sun, 02 Apr 2023 23:41:05 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/stl%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[STL种类以及其底层实现]]></description>
</item>
<item>
    <title>游戏输入模块</title>
    <link>https://dandkong.github.io/%E6%B8%B8%E6%88%8F%E8%BE%93%E5%85%A5%E6%A8%A1%E5%9D%97/</link>
    <pubDate>Tue, 13 Dec 2022 21:10:37 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E6%B8%B8%E6%88%8F%E8%BE%93%E5%85%A5%E6%A8%A1%E5%9D%97/</guid>
    <description><![CDATA[输入模块是游戏中的基础系统，需要封装中间层适配PC平台与移动平台，并提供常用接口。]]></description>
</item>
<item>
    <title>人物移动模块</title>
    <link>https://dandkong.github.io/%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8%E6%A8%A1%E5%9D%97/</link>
    <pubDate>Mon, 12 Dec 2022 19:51:11 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8%E6%A8%A1%E5%9D%97/</guid>
    <description><![CDATA[一、概述 游戏中角色移动分为了主动和被动，主动主要由玩家通过摇杆或者键盘进行操作，被动移动主要应用于自动寻路，通过寻路点行动。
二、主动移动 移动组件 移动组件主要用到Unity的移动组件Character Controller，主要属性如下
Height角色的高度，通常和现实中的人物一样设置为2米左右。 Radius角色的半径，用于控制人物的胖瘦。 Center设置角色中心点的位置。 Slope Limit限制角色能爬的最大坡度。通常设置为90度以下，这样角色就不会走到墙上。 Step Offset移动步长。通常2米左右的人移动步长设置在0.1到0.4米. Skin Width皮肤厚度。如果这个值太小角色容易被卡住，太大角色容易抖动。通常将这个数据设为0.01到角色半径的10%之间。 Min Move Distance最小移动距离。官方推荐把这个值设为0。 isGrounded可以获取角色当前是否在地面。 velocity可以获取角色当前的速度向量。 移动方法主要用到Move，Move方法需要自己实现重力的效果，看具体项目需求
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //用摇杆控制方向，当按下空格键时跳起。 using UnityEngine; using System.Collections; public class ExampleClass : MonoBehaviour { public float speed = 6.0F; public float jumpSpeed = 8.0F; public float gravity = 20.]]></description>
</item>
<item>
    <title>副本逻辑框架</title>
    <link>https://dandkong.github.io/%E5%89%AF%E6%9C%AC%E9%80%BB%E8%BE%91%E6%A1%86%E6%9E%B6/</link>
    <pubDate>Fri, 09 Dec 2022 13:37:15 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E5%89%AF%E6%9C%AC%E9%80%BB%E8%BE%91%E6%A1%86%E6%9E%B6/</guid>
    <description><![CDATA[概述 一般副本中都会包括各种各样的行为和判断逻辑，下面举一个简单的副本例子，进入副本后，如果组队人数到达三个，则刷出怪物，播放特效，播放对话，与怪物战斗后，弹出结算UI，再播个动画。 如果由策划出完案子后程序负责直接实现的话，每个副本都是定制化的，写起来非常难受，而且维护极不方便，一旦需求改动就要重新写代码 所以需要设计一套副本系统可以灵活配置副本功能，想法是把副本里的每个行为，判断都作为一个节点，类型行为树的概念，从开始节点一直执行到结束节点，这个副本进程就结束了，进入下个副本进程。 编辑器使用连线的方式操作，每个节点的前后置关系，导出lua配置供程序使用，服务端控制执行流程，客户端只需要执行节点逻辑。 例子 节点可以分为执行节点和判断节点，执行节点执行一个行为，流程推进，判断节点在符合条件的时候，推进流程，否则暂停。 端口定义了每个节点间的关系，也就是图中的连线，控制流程走向，比如刷怪战斗节点，输入端口连接“判断组队人数”，有两个输出端口，分别是胜利和失败，连接对应的节点。 把副本流程解构成一个个节点以后，只需要维护节点的行为和端口逻辑即可，组合由策划完成，只有在添加新节点时程序才需要上场。 编辑器 编辑器可以用网上的开源例子xnode组织节点，也可自己实现。 导出的数据包括了节点的类型，参数，前后置节点等一切代码需要的信息。 副本流程 服务端推送当前节点信息 服务端执行/客户端执行 服务端/客户端完成节点，推进流程 直到到达结束节点 ]]></description>
</item>
<item>
    <title>场景数据框架</title>
    <link>https://dandkong.github.io/%E5%9C%BA%E6%99%AF%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/</link>
    <pubDate>Mon, 05 Dec 2022 21:31:39 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E5%9C%BA%E6%99%AF%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/</guid>
    <description><![CDATA[一、概述 一般MMO的游戏由场景和场景中的对象构成，在设计地图时，就会遇到几个问题。怎么有效直观地配置信息，对象都有什么功能，有什么功能是共有的。针对上面的问题，首先需要解决的是抽象出场景对象结构，在此基础上做编辑器，用图形化的界面展示，修改储存数据，供代码使用。
二、场景对象结构 场景本事有数据，如场景资源，组队人数限制等等，这种信息改动不大，也比较直观，一般只要存在excel里面就好，需要的话可以做图形编辑器对excel进行读写和修改。
场景中的对象可以按需分成几类，常见的有npc，采集物，区域，点等等。
NPC NPC主要承载了显示模型的功能，读取NPC表。
采集物 采集物和NPC差不多，只是对话交互改成了点击采集。
区域 区域分成了圆形区域和多边形区域，划分区域可以实现进入和离开区域的逻辑，比如划分了游泳区，飞行区等，进入以后主角切换运动状态。
点 点的功能比较广泛，主要用于定位，也可以添加触发组件以后实现圆形区域的功能。
组件 组件是对象上的属性和功能，公用的组件有缩放，大小，显示隐藏条件等，特殊的组件有巡逻，交互按钮等，按需添加，从而赋予对象特性。
三、场景编辑器 理清了场景对象的结构以后，就可以做编辑器把数据组织起来了，场景编辑器的实现细节不多说，尽量用起来符合直观操作即可，功能如下。
增删改场景信息 直观展示场景中的对象（位置、模型、范围等） 增删改场景中的对象 修改对象的组件属性 导出程序可用数据 四、数据载体 数据可以直接导出lua，也可以导出成json，xml等，只要方便维护，程序方便调用即可。 目前使用的是先储存到excel，再从excel导出到lua中，供程序调用。 使用excel作为中间载体的原因可能是比较直观，但感觉使用json或者Unity序列化的方法也是可行的。 ]]></description>
</item>
<item>
    <title>游戏对象框架</title>
    <link>https://dandkong.github.io/%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E6%A1%86%E6%9E%B6/</link>
    <pubDate>Sun, 27 Nov 2022 08:51:40 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E6%A1%86%E6%9E%B6/</guid>
    <description><![CDATA[概述 游戏对象管理一般是通过总分结构，管理器为RoleMgr，对象为Role，Role的功能由各种功能组件实现，从而实现继承和解耦。
RoleMgr 管理类管理游戏中所有的Role，负责Role的创建、查找、销毁，一般配合UID生成器，给每一个Role分配一个唯一ID作为唯一的标识。
Role Role是游戏中的对象，可以是角色，特效，建筑等等游戏中的一切实体，由BaseRole派生。
BaseRole 基类，定义Role的最基本信息，如GameObject，Transform信息，显示隐藏状态等等。
派生 对BaseRole进行派生就是具体的游戏对象，如添加了控制器以后就是角色，再添加主动移动的控制器以后就是主角，通过绑定不同的组件实现Role的不同方向功能。
Role的功能 Role的功能都由挂载的组件实现，常用的组件有
模型组件 被动移动组件 主动移动组件 显示隐藏组件（多条件） 范围触发组件（当玩家走进时会触发回调） 头顶文本组件 还有各种项目中需要实现的功能 Role的结构 ]]></description>
</item>
</channel>
</rss>
