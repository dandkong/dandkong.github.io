<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Unity on Dand</title>
    <link>https://dandkong.github.io/tags/unity/</link>
    <description>Recent content in Unity on Dand</description>
    <image>
      <title>Dand</title>
      <url>https://dandkong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dandkong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.129.0</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 27 Jul 2024 21:37:10 +0800</lastBuildDate>
    <atom:link href="https://dandkong.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>游戏框架-Tween</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-tween/</link>
      <pubDate>Sat, 27 Jul 2024 21:37:10 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-tween/</guid>
      <description>前言 Unity 中的补间动画（Tween Animation）是一种在两个关键帧之间自动生成平滑过渡的动画技术。一般在程序动画中使用，如位置、旋转、缩放、颜色等的变化。
这里介绍的框架在这基础上，加入了时间节点（延时执行、反复执行）和行为树的概念，把动画抽象在“节点”概念之下。
节点类型 链式节点 链式节点相当于容器，本身没有具体的执行逻辑，管理了节点列表，在合适的时机标记链式节点为完成状态，根据完成的条件分为以下节点，类似行为树。
顺序节点：按顺序执行节点，上一个节点执行完才执行下一个，全部完成以后标记完成 并行节点：并行执行节点，全部完成以后标记完成 执行节点 执行完回调以后就标记完成
条件节点 Update中判断条件，返回True以后标记完成
时间节点 延后当Timer完成后标记完成，Timer可以简单延迟，也可以反复执行一定次数以后标记完成。
值节点 值节点才是传统意义上的补间动画，就是通过输入时间，计算出值的结果，每帧执行，下面具体介绍。
值节点 值节点主要由两个部分组成，一个是缓动函数，一个是插值函数。
在Update先通过缓动函数，默认为线性函数，根据流逝的时间计算出当前的进度。
再调用插值函数，根据当前进度算出结果值，默认为线性函数。
根据值节点派生出的Color、Vector、Float节点，其实就是插值函数不一样。
缓动函数（Easing Function） 缓动函数是一种用于控制动画或过渡效果速度变化的数学函数。
它的主要作用是使动画或过渡效果看起来更加自然和真实。在没有缓动函数的情况下，动画可能会以恒定的速度进行，显得生硬和不流畅。
缓动函数可以改变动画在不同阶段的速度，常见的效果包括：
加速：动画开始时速度较慢，然后逐渐加快。 减速：动画开始时速度较快，然后逐渐减慢。 先加速后减速：动画开始时加速，然后在接近结束时减速。 先减速后加速：动画开始时减速，然后在中间或接近结束时加速。 //-------------------------------------------------- // Author : David Ochmann // Website：https://easings.net/ //-------------------------------------------------- using System; namespace UniFramework.Tween { /// &amp;lt;summary&amp;gt; /// 公共补间方法 /// &amp;lt;/summary&amp;gt; public static class TweenEase { public static class Linear { public static float Default(float t, float b, float c, float d) { return c * t / d + b; } public static float EaseIn(float t, float b, float c, float d) { return c * t / d + b; } public static float EaseOut(float t, float b, float c, float d) { return c * t / d + b; } public static float EaseInOut(float t, float b, float c, float d) { return c * t / d + b; } } public static class Sine { public static float EaseIn(float t, float b, float c, float d) { return -c * (float)Math.</description>
    </item>
    <item>
      <title>游戏框架-UI管理器</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-ui%E7%AE%A1%E7%90%86%E5%99%A8/</link>
      <pubDate>Tue, 23 Jul 2024 21:26:26 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-ui%E7%AE%A1%E7%90%86%E5%99%A8/</guid>
      <description>前言 UI一般是入门程序员首先接触到的内容，除了业务的开发，还有很多值得研究的地方。
例如共用的组件设计，渲染的效果（如各种文字效果，在UI上显示模型和特效），性能上的优化（如虚拟的滚动列表，UI的动静分离，图集等），还有UI的管理。
这篇文章就来实现一个简单的UI管理器，主要的类就是管理类和窗口类。
框架功能 打开单例UI 加载 层级管理 显隐管理 UI生命周期管理（初始化，打开后，轮询更新，关闭后，销毁） 类图 管理类 管理类是外部调用的入口，打开和关闭窗口，管理UI的层级以及显示隐藏状态。
打开窗口以后，实例化一个对应的类，调用其加载方法
窗口加载完成或者窗口关闭以后回调到管理类中，遍历窗口列表重新设置其深度值，根据是否有全屏窗口，把比全屏窗口以下的窗口都设置为隐藏。
窗口类 窗口类定义了窗口的特性，如是否全屏，所在层级等，按项目需求添加特性。
窗口类中需要复写其生命周期函数，在合适的时机做合适的事情。
一般在初始化时，初始化组件，打开后，显示内容，关闭或者销毁时，做清理。
另外一个值得注意的时，当UI被隐藏的时候，不是使用SetActive(false)，因为这样会引起UI的网格重构，可以把UI移动到一个渲染不到的layer下，或者直接移出相机以外。
打开UI 打开UI时的流程如下
功能拓展 这里只是实现了基础的功能，实际项目中还有许多功能可能用得上，但只需在这基础上拓展即可。
支持面板中的嵌套Prefab：可以在UIWindow给再写一个父类。 打开关闭动画支持：涉及到生命周期的调用实际，需要等待动画完成以后再调用打开关闭方法。 增加缓存：关闭UI时不立即销毁，而且先缓存起来，真正销毁的时机，可以是达到一定的缓存值，或者是存活时机，按实际需要写。 增加通用的遮罩管理。 增加多实例的窗口打开，一个窗口可以多开。 总结 UI管理器基本的功能，以及拓展的功能介绍完了。
实现这些功能不难，但是想要优雅把这些功能都组织起来，让调用简单，代码阅读清晰，也是一门艺术。
参考 UniFramework/UniFramework/UniWindow at main · gmhevinci/UniFramework</description>
    </item>
    <item>
      <title>Unity使用Socket</title>
      <link>https://dandkong.github.io/posts/unity%E4%BD%BF%E7%94%A8socket/</link>
      <pubDate>Wed, 17 Jul 2024 22:05:10 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/unity%E4%BD%BF%E7%94%A8socket/</guid>
      <description>前言 之前开发一直都在关注客户端的逻辑，没有涉及到网络相关的知识，这几天参考网上的资料学习了一下做个简易的网络聊天室，记录一下。
简单的网络通信于 Unity 客户端借助 Socket 与服务端达成连接，并依据事先约定的协议（诸如 json、protobuf 等）展开通信。
客户端 客户端的主要功能：连接，发送数据，接收数据。
这里参考开源的简易网络框架，可以自定义其包体，编码器和解码器。
using System.Net; using System.Net.Sockets; using System.Text; using UnityEngine; using UniFramework.Network; // 登录请求消息 class LoginRequestMessage { public string Name; public string Password; } // 登录反馈消息 class LoginResponseMessage { public string Result; } // TCP客户端 UniFramework.Network.TcpClient _client = null; // 创建TCP客户端 void CreateClient() { // 初始化网络系统 UniNetwork.Initalize(); // 创建TCP客户端 int packageMaxSize = short.MaxValue; var encoder = new DefaultNetPackageEncoder(); var decoder = new DefaultNetPackageDecoder(); _client = UniNetwork.</description>
    </item>
    <item>
      <title>YooAsset学习笔记3：编辑器</title>
      <link>https://dandkong.github.io/posts/yooasset%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Sat, 29 Jun 2024 22:02:52 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/yooasset%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>前言 上一篇文章简述了YooAsset资源管理框架运行时的框架的使用，接下来通过代码分析其内部原理。
概览 YooAsset框架的编辑器部分包含了四个部分。
收集：通过过滤规则，资源包名，定位地址，划分打包资源。 构建：根据收集到的资源，同时收集其依赖资源，打包成Bundle包。 Reporter：打包后的资源报告。 Debugger：运行时的资源加载情况。 收集 收集器主要通过过滤规则，资源包名，定位地址来划分资源，具体的用法在使用文档有详细介绍，本系列的第一篇也有介绍。
构建 资源构建也是和运行时的设计相似，按步骤构建，流程如下图所示。
构建管线分为内置管线，可编程管线，原生管线，内置管线和可编程管线的构建步骤基本一致，调用的API有不同。原生管线就是直接复制文件，不构建Bundle。
总结 编辑器的框架就是如此，先收集再按步骤构建，再配套Reporter和Debugger进行排查分析。
本系列教程到此结束，感谢阅读。
参考 https://github.com/tuyoogame/YooAsset</description>
    </item>
    <item>
      <title>YooAsset学习笔记2：运行时</title>
      <link>https://dandkong.github.io/posts/yooasset%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E8%BF%90%E8%A1%8C%E6%97%B6/</link>
      <pubDate>Fri, 14 Jun 2024 22:02:52 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/yooasset%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E8%BF%90%E8%A1%8C%E6%97%B6/</guid>
      <description>前言 上一篇文章简述了YooAsset资源管理框架的使用，接下来通过代码分析其内部原理。
整体框架 YooAsset框架主要分为运行时和编辑器部分，运行时实现了资源包加载，Bunlde加载，缓存，下载，从上到下的结构。编辑器部分实现了资源收集，资源构建。这篇文章主要分析运行时的机制，结构如下。
加载流程 运行时加载流程主要如下，加载开始以后，每一层的模块基本都是轮询实现。
简单的例子就是调用加载，从上到下，上层等待下层完成自己的步骤，如果完成，再轮询到下个阶段。
每一层根据加载模式和资源类型的不同派生到不同的对象负责轮询，下面的示例是远程加载AssetBundle的示意流程。
根据运行模式初始化包 外部调用加载 调用默认包的加载 Provider轮询，等待Bundle加载完成，再从Bundle中加载具体资源 Loader轮询，等待Bundle加载完成 Downloader轮询，等待下载完成 Requeseter轮询，等待请求完成 资源包（ResourcePackage） 资源包是一个比较上层的概念，在游戏初始化时要初始化包和其加载模式。具体的加载模式可以参照上一篇文章。
定义加载模式 维护版本 维护资源清单 资源管理器（ResourceManager） 资源管理器负责加载具体的资源，根据不同的加载模式和资源类型分成不同的Provider和Loader，并返回对应的Handle。
Provider功能：从加载好的Bundle中加载具体的资源
Loader功能：加载Bundle。
下载系统（DownloadSystem） 下载系统由上层的Loader持有，加载Bundle时，如果还没下载，调用下载系统进行下载。
下载器根据不同的加载模式和资源类型区分，分类普通文件和Web文件，区别在于Web文件不进行缓存。
下载功能由Requester承担，分为普通请求和断点续传。
缓存系统（CacheSystem） 缓存系统是在加载资源时，下载过就不需要再次下载了，直接在本地沙盒目录中读取。
缓存系统由下载系统调用，当下载完成以后，保存本地文件，并记录到缓存系统。
如果已有文件，则进行校验再进行记录。
另一个调用是在资源包初始化后，把已经下载的文件验证一遍，记录到缓存系统中。
后记 运行的框架就是如此，虽然功能很多，但结构清晰，使用了分层处理的思想。
下一篇将介绍编辑器的逻辑，敬请期待。
参考 https://github.com/tuyoogame/YooAsset</description>
    </item>
    <item>
      <title>UI特效插件-UIParticle</title>
      <link>https://dandkong.github.io/posts/ui%E7%89%B9%E6%95%88%E6%8F%92%E4%BB%B6-uiparticle/</link>
      <pubDate>Thu, 06 Jun 2024 22:45:30 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/ui%E7%89%B9%E6%95%88%E6%8F%92%E4%BB%B6-uiparticle/</guid>
      <description>前言 在UI上显示特效是一直是一个比较棘手的问题，一开始的方案是调整UI特效的渲染顺序，设置其sortingLayer和sortingOrder+offset，在每个单独的UI以后渲染。
这种方法能满足大部分的需求，但也有缺点。
如果需要在特效上再盖一层UI的话，由于特效并不属于Canvas的一部分，所以修改Hierarchy并不能改变其渲染顺序，特效会在渲染完Canvas的UI元素以后再进行渲染，所以需要把这个UI的层级通过添加Canvas继续往上抬。
再者无法被RectMask2D和Mask裁剪，除非改造Shader，并手动传入裁剪区域。
最好的方法就是让特效像UI一样，直接按Hierarchy 顺序渲染，并支持遮罩，就是这文章的主角UIParticle。
原理 This package utilizes the new APIsMeshBake/MashTrailBake(introduced with Unity 2018.2) to render particles through CanvasRenderer.
You can render, mask, and sort your ParticleSystems for UI without the necessity of an additional Camera, RenderTexture, or Canvas.
这是项目首页的原理，具体就是通过一个API让例子特效通过CanvasRender进行渲染，这样就和普通的UI没什么不同了。
使用 按官方的教程，直接引入包，添加组件到特效上，直接拖到UI中即可。
改造已有shader以支持遮罩 项目推荐我们使用UIShader，如UIDefault或者UIAdditive。
Mask通过模板测试实现遮罩，RectMask2D通过传入裁剪区域实现。
所以自定义的Shader只需要参考上面的UIShader使其拥有遮罩特效即可，注意RenderQueue设置为Transparent，下面贴一下关键Shader代码。
Shader &amp;#34;Your/Custom/Shader&amp;#34; { Properties { // ... // #### required for Mask #### _StencilComp (&amp;#34;Stencil Comparison&amp;#34;, Float) = 8 _Stencil (&amp;#34;Stencil ID&amp;#34;, Float) = 0 _StencilOp (&amp;#34;Stencil Operation&amp;#34;, Float) = 0 _StencilWriteMask (&amp;#34;Stencil Write Mask&amp;#34;, Float) = 255 _StencilReadMask (&amp;#34;Stencil Read Mask&amp;#34;, Float) = 255 _ColorMask (&amp;#34;Color Mask&amp;#34;, Float) = 15 [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (&amp;#34;Use Alpha Clip&amp;#34;, Float) = 0 } SubShader { Tags { // .</description>
    </item>
    <item>
      <title>使用状态机初始化游戏</title>
      <link>https://dandkong.github.io/posts/%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E6%9C%BA%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Sun, 02 Jun 2024 21:14:26 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E6%9C%BA%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B8%B8%E6%88%8F/</guid>
      <description>前言 最近在写游戏demo的时候，在写初始化流程的时候遇到一些问题，一开始通过回调函数来控制初始化流程，并不直观，也不好分离逻辑。进入游戏以后首先是准备好必要的资源，通过YooAssets进行加载，加载完成以后再进行游戏系统的初始化。一开始是在资源加载接口加了回调，加载完以后再进行游戏初始化，但不够优雅，如果需要更多的流程控制会写得比较乱。
最后用状态机实现游戏初始化的流程，首先就是要写一个有限状态机了，参考了一下开源的项目，这里总结一下。
状态机 管理状态：启动，状态转换，管理状态的生命周期 数据处理能力：增删查数据，状态中可以使用这些全局数据 状态 状态定义具体的逻辑，有OnInit,OnEnter,OnUpdate,OnLeave,OnDestroy生命周期。状态内调用状态机进行状态的切换。
UML类图 参考 GitHub - EllanJiang/GameFramework: This is literally a game framework, based on Unity game engine. It encapsulates commonly used game modules during development, and, to a large degree, standardises the process, enhances the development speed and ensures the product quality.
UniFramework/UniFramework at main · gmhevinci/UniFramework</description>
    </item>
    <item>
      <title>YooAsset学习笔记1：接入流程</title>
      <link>https://dandkong.github.io/posts/yooasset%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Tue, 21 May 2024 19:54:20 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/yooasset%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/</guid>
      <description></description>
    </item>
    <item>
      <title>利用ActionManger拓展psd2gui</title>
      <link>https://dandkong.github.io/posts/%E5%88%A9%E7%94%A8actionmanger%E6%8B%93%E5%B1%95psd2gui/</link>
      <pubDate>Sat, 16 Mar 2024 20:14:29 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E5%88%A9%E7%94%A8actionmanger%E6%8B%93%E5%B1%95psd2gui/</guid>
      <description></description>
    </item>
    <item>
      <title>Unity开发性能优化总结</title>
      <link>https://dandkong.github.io/posts/unity%E5%BC%80%E5%8F%91%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 08 Jul 2023 11:24:17 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/unity%E5%BC%80%E5%8F%91%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</guid>
      <description>Unity开发性能优化总结</description>
    </item>
    <item>
      <title>根据Prefab自动生成Lua代码</title>
      <link>https://dandkong.github.io/posts/%E6%A0%B9%E6%8D%AEprefab%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90lua%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 07 Jun 2023 21:01:30 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%A0%B9%E6%8D%AEprefab%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90lua%E4%BB%A3%E7%A0%81/</guid>
      <description>根据Prefab自动生成Lua代码，添加按钮回调，添加组件引用，添加自定义代码。</description>
    </item>
    <item>
      <title>状态同步与帧同步</title>
      <link>https://dandkong.github.io/posts/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Thu, 11 May 2023 21:35:54 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5/</guid>
      <description>简要概括帧同步，状态同步和状态帧同步的原理以及优缺点</description>
    </item>
    <item>
      <title>游戏输入模块</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E8%BE%93%E5%85%A5%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 13 Dec 2022 21:10:37 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E8%BE%93%E5%85%A5%E6%A8%A1%E5%9D%97/</guid>
      <description>输入模块是游戏中的基础系统，需要封装中间层适配PC平台与移动平台，并提供常用接口。</description>
    </item>
    <item>
      <title>人物移动模块</title>
      <link>https://dandkong.github.io/posts/%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 12 Dec 2022 19:51:11 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8%E6%A8%A1%E5%9D%97/</guid>
      <description>一、概述 游戏中角色移动分为了主动和被动，主动主要由玩家通过摇杆或者键盘进行操作，被动移动主要应用于自动寻路，通过寻路点行动。
二、主动移动 移动组件 移动组件主要用到Unity的移动组件Character Controller，主要属性如下
Height角色的高度，通常和现实中的人物一样设置为2米左右。 Radius角色的半径，用于控制人物的胖瘦。 Center设置角色中心点的位置。 Slope Limit限制角色能爬的最大坡度。通常设置为90度以下，这样角色就不会走到墙上。 Step Offset移动步长。通常2米左右的人移动步长设置在0.1到0.4米. Skin Width皮肤厚度。如果这个值太小角色容易被卡住，太大角色容易抖动。通常将这个数据设为0.01到角色半径的10%之间。 Min Move Distance最小移动距离。官方推荐把这个值设为0。 isGrounded可以获取角色当前是否在地面。 velocity可以获取角色当前的速度向量。 移动方法主要用到Move，Move方法需要自己实现重力的效果，看具体项目需求
//用摇杆控制方向，当按下空格键时跳起。 using UnityEngine; using System.Collections; public class ExampleClass : MonoBehaviour { public float speed = 6.0F; public float jumpSpeed = 8.0F; public float gravity = 20.0F; private Vector3 moveDirection = Vector3.zero; void Update() { CharacterController controller = GetComponent&amp;lt;CharacterController&amp;gt;(); if (controller.isGrounded) { moveDirection = GetTargetPos(nowPos) - nowPos; // 跳跃 if (Input.</description>
    </item>
    <item>
      <title>UGUI对比FGUI</title>
      <link>https://dandkong.github.io/posts/ugui%E5%AF%B9%E6%AF%94fgui/</link>
      <pubDate>Fri, 18 Nov 2022 21:02:40 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/ugui%E5%AF%B9%E6%AF%94fgui/</guid>
      <description>前言 UI是游戏中很重要的一部分，工作大多是繁复的，所以有一套功能强大，操作简单直观的UI解决方案是非常有必要的。
上半年一直在用FGUI，和之前用的UGUI相比下来，各有优缺点，对比分析记录一下。
一、介绍 UGUI UGUI是Unity原生提供的UI方案，提供了基本的UI组件，如图片，文本，按钮，复选框，进度条等等，正是因为UGUI是面向普遍开发，所以没有封装很多高级的组件，比如虚拟列表。
FGUI FairyGUI（下来简称FGUI）号称易上手，直观，零代码，有一个独立的编辑器，封装了很多高级的UI组件，用起来不需要自己造轮子。
二、编辑器使用体验 UGUI 优点：稳定。
缺点：因为集成在Unity中，资源管理不太方便，需要项目定好规范，编写工具提交效率。
FGUI 优点：有单独的编辑器，所有资源统一管理，美术策划也能很快上手使用。
缺点：不稳定，经常会莫名卡住，导出的时候经常报错。
三、基础组件 基础组件上面因为FGUI实现很多的高级功能，所以使用起来体验要么一样，要么好点。
文本 FGUI文本支持ubb语法，富文本支持图文混排，超链接等等，自动大小的文本。
列表 FGUI实现了虚拟列表，树列表。
字体 字体上FGUI提供了工具制作美术字，只要把资源拖进去专用的编辑器就能很快做出一个美术字体。
动效系统 两者都有动效系统，UGUI上叫Animation，功能上差不多，都很强大。
四、对齐系统 对齐系统这一块，FGUI是很大的亮点。
UGUI UGUI的锚点系统以中心点为基准，对父节点对齐，提供了上下左右，拉伸对齐方式。
**优点：**简单直观UI默认的中心点在中心，符合人的正常思维。
缺点：不够灵活；同级UI之前的关联对齐要依赖其他布局组件；缺乏针对同级元素的对齐工具，不过可以自己拓展实现，可以参考我的另一篇文章。
FGUI 优点：FGUI的对齐系统叫做关联系统，第一个优点是不局限与与父节点对齐，可以对任意两个元素进行对齐。第二个优点是在拓展了对齐的维度，可以以上下左右边缘为基准，可以以上下左右为基准拉伸，复杂一点，但是学会以后可以很方便实现一些效果，比如一张图片随着文字的变长而往右移动。
缺点：垂直布局和水平布局功能太单一；锚点在左上角各种反人类。
五、FGUI特色功能 资源引用查找工具 可以轻易找到组件（图片）和其他组件的引用关系。
支持多国语言 原生支持多国语言，可以导出xml维护即可。
控制器系统 控制器系统一般用于控制显示一些UI元素的状态，可以配合动效和Tab使用，UGUI一般要通过代码控制或者自己实现一个类似的系统。
多平台 FGUI可以一套UI，应用到不同的游戏引擎去，比如Unity和Unreal，对于后期可能更换引擎的项目，节省掉很多成本。
插入3D物体 支持在UI层中插入任何3D物体，例如模型、粒子、骨骼动画等，UGUI中要通过修改特效和UI的渲染顺序实现，比较麻烦。
六、拓展性 两者都有拓展性，FGUI的拓展性在于代码是开源的，可以在底层定制适合项目的功能，但是编辑器是不开源的，所以编辑器里面的东西改不了，虽然编辑器提供了脚本拓展支持，但能实现的东西不多。
UGUI的拓展性在于可以轻松地对编辑器进行拓展，也可以加上各种效果，一般也不会动到底层的如网格重构和渲染的代码，真想修改的话可能要和Unity进行合作然后项目搞一个魔改版的Unity。
七、总结 总的来说两种UI解决方案都可以商用，不会有特别大的问题。
要是策划美术拼UI的话，可以选择FGUI，相反要是程序负责的话，两者都可以，但个人感觉Unity上的操作更加熟悉一点，程序员也可以在平时的UI流程中，吸收一些FGUI的思想，做些工具提高UI的开发效率。</description>
    </item>
    <item>
      <title>UGUI对齐工具</title>
      <link>https://dandkong.github.io/posts/ugui%E5%AF%B9%E9%BD%90%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 16 Nov 2022 22:54:00 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/ugui%E5%AF%B9%E9%BD%90%E5%B7%A5%E5%85%B7/</guid>
      <description>前言 上半年的大半年时间都在用FGUI，最近又用回了UGUI，发现FGUI的一些工具还是很高效的，比如对齐工具，想着说移植到UGUI里面去，上网搜了一圈还真有，原理并不复杂，就是进行一些数学计算出最终的位置。
不过也没有完全适合项目需求，针对原项目基础上添加了三个功能，下面介绍一下。
一、撤销功能 原项目的工具在修改后，习惯性就按下Ctrl+Z，发现并不能撤销原来的操作，查询了Unity的API后，发现有个Undo的类，可以实现撤销功能，有很多方法，主要用到了RecordObject，代码如下
private static void SetTranPos(Transform tran, Vector3 pos) { Undo.RecordObject(tran, &amp;#34;modify posstion&amp;#34;); tran.position = pos; } 二、Selection.GameObjects不是按选择顺序的 API中的Selection.GameObjects用于获取当前选中的物件，数组的顺序和我选择的顺序无关，所以不能实现灵活的对齐，查询网上文章可以用Selection.Objects替代，里面的第一个元素就是Ctrl选中的第一个元素，以此类推，代码如下
//按选中顺序获取GameObjects private static GameObject[] GetOrderedSelctionObjs() { return Selection.objects.OfType&amp;lt;GameObject&amp;gt;().ToArray(); } 三、添加对父节点对齐 功能就是和标题一样，原项目是没有的，代码如下
//如果只选中一个，对父节点对齐 if (rects.Count == 1) { if (rects[0].parent != null &amp;amp;&amp;amp; rects[0].parent.GetComponent&amp;lt;RectTransform&amp;gt;() != null) { rects.Insert(0, rects[0].parent.GetComponent&amp;lt;RectTransform&amp;gt;()); } } 四、代码 UGUIAlign using System.Collections.Generic; using System.Linq; using UnityEditor; using UnityEngine; public enum AlignType { Top = 1, Left = 2, Right = 3, Bottom = 4, HorizontalCenter = 5, //水平居中 VerticalCenter = 6, //垂直居中 Horizontal = 7, //横向分布 Vertical = 8, //纵向分布 } public class UGUIAlign : Editor { [MenuItem(&amp;#34;GameObject/UI/Align/Left 【左对齐】&amp;#34;)] static void AlignLeft() { Align(AlignType.</description>
    </item>
    <item>
      <title>《游戏逻辑思想》学习笔记</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 12 Nov 2022 20:58:13 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>前言 这本书忘记从哪里下载了，和别的技术书籍不太一样，大多的内容都比较贴合项目开发，所以有一定的参考价值。
里面有几个章节觉得有收获的，主要是框架的设计，以及一些解决问题的思路，大致做了笔记或者摘录。
一、基础内容交流 代码规范 可读代码：由于动态语言的类型灵活性，可以在变量前加上变量类型简称
正确使用断言与返回 注意什么时候可以为空，不要盲目返回
可拓展接口使用 多参数，下面演示了三种写法，最终应该在保留必要参数的情况下，可选参数做成table
addModulePower(nModuleId, nPower); addModulePower(nModuleId,nPower,bSyncMsg,bSendEvent, bOnlyBoss) if( tOption &amp;amp;&amp;amp; tOption.bSyncMsg){ //做这个参数该干的事情 } 调试的思维与逻辑 正向和逆向思维，逆向更快 不易复现的bug，埋下日志，下次使用 培养敏锐的异常反应 注意生命周期的创建与销毁
代码修改与重构 我们在项目中秉持一个原则，如果有个接口让你不舒服，比如说多传了几个参数，那么我们一定要提出来，那一定是接口的设计不够简单或者没有提供更简单的接口形式。
优雅的使用外部代码 我们的一个原则就是要尽可能少去直接和引擎进行交互，而是更多的进行局部缓存，把战场拉回到更加通用的逻辑里面。 修改后的代码为： let levelSlider = Core.createBitmapByName(&amp;#34;slider_png&amp;#34;); let nSliderX = 0; if(XXX){ nSliderX += 6; } if(XXX){ nSliderX += 8; } if(XXX){ nSliderX -= 2; } levelSlider.x -= nSliderX; 选择简单的接口/参数以及尽量少的使用/调用底层接口就是我们所谓的正确的代码使用方式。 代码审查 取出一个管理器对象。然后直接访问了它的成员函数，这是非常不应该行为。第一个是这个成员不应该是公有的，而应该是私有的，它的公有性质破坏了类的封装。
从面试的角度看面试 基础能力，逻辑能力，硬核能力
如何应对代码错误 作为项目的主程，还需要统一思想。这个过程包括要求大家遵循统一的代码命名等，这也是规避错误的一个重要手段。越是相似的代码风格，代码的阅读速度就会越快。
二、逻辑设计模式式讨论 分层设计 事件的派发遵循从下往上：比如M驱动V 依赖性越强的越靠下层 变化的放上层，底层可以互相依赖，逻辑层不允许相互依赖 主动和被动 被动模式，依赖事件，及时，性能消耗少，当被动模式不在能支持复杂逻辑时，可以考虑主动模式 主动模式，依赖轮询，有点像ESC的系统层监听实体层的感觉了。优点在于可以监听多种条件 阻塞和非阻塞 主要用于资源加载，阻塞速度快</description>
    </item>
    <item>
      <title>捏体型方案</title>
      <link>https://dandkong.github.io/posts/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sat, 12 Nov 2022 00:45:33 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/</guid>
      <description>捏脸主要是通过复制一份骨骼（称为编辑骨骼）的Transform值，带动蒙皮来实现体型的变化，主要技术点在实现方式，编辑器开发，骨骼数据的组织方式，数据的存取。</description>
    </item>
    <item>
      <title>InstantOC &#43; LOD</title>
      <link>https://dandkong.github.io/posts/instantoc/</link>
      <pubDate>Sat, 12 Nov 2022 00:16:35 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/instantoc/</guid>
      <description>主要用于剔除遮挡以及LOD</description>
    </item>
  </channel>
</rss>
