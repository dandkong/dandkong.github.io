<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Unity - 标签 - Dand&#39;s Blog</title>
        <link>https://dandkong.github.io/tags/unity/</link>
        <description>Unity - 标签 - Dand&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 21 May 2024 19:54:20 &#43;0800</lastBuildDate><atom:link href="https://dandkong.github.io/tags/unity/" rel="self" type="application/rss+xml" /><item>
    <title>YooAsset学习笔记1：接入流程</title>
    <link>https://dandkong.github.io/yooasset%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/</link>
    <pubDate>Tue, 21 May 2024 19:54:20 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/yooasset%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/</guid>
    <description><![CDATA[前言 YooAsset是一套Unity的资源管理方案，类似Unity提供的Addressable资源系统配置好了资源规则，后面只需要用一个“寻址路径”就能透明加载资源，无需关注位于什么bundle包，以及bunlde的依赖关系，也无需关注资源包是位于本地或者远端CDN。
接入流程 安装YooAsset 参照官网教程即可，这里使用package进行安装。
资源配置 资源配置是YooAsset系统的亮点所在，这里用一个简单的登录界面作为例子配置一下。
首先看看文件目录，这里需要加载LoginView，LoginView里用到了test图片，test图片又被收集在图集login中。
资源配置有几个重要的概念，分别是AddressRule，CollecterType，PackRule，FilterRule
AddressRule 可寻址规则，这是加载资源时需要传入的字符串，通过这个地址找到资源所在的包，这里使用默认完整路径加载。
CollecterType MainAssetCollector 收集参与打包的主资源对象，并写入到资源清单的资源列表里（可以通过代码加载）。 StaticAssetCollector 收集参与打包的主资源对象，但不写入到资源清单的资源列表里（无法通过代码加载）。 DependAssetCollector 收集参与打包的依赖资源对象，但不写入到资源清单的资源列表里（无法通过代码加载）（当依赖资源没有被任何主资源引用的时候，则会在打包的时候自动剔除）。
首先看UIPrefabs，需要直接用代码加载的，设置为MainAssetCollector
再看图集Atlas，login中的所有精灵图片都被收集在图集文件中，但是不需要单独被代码加载，设置为StaticAssetCollector。
PackRule PackSeparately 以文件路径作为资源包名，每个资源文件单独打包。 PackDirectory 以文件所在的文件夹路径作为资源包名，该文件夹下所有文件打进一个资源包。PackTopDirectory 以收集器下顶级文件夹为资源包名，该文件夹下所有文件打进一个资源包。PackCollector 以收集器路径作为资源包名，收集的所有文件打进一个资源包。 PackGroup 以分组名称作为资源包名，收集的所有文件打进一个资源包。PackRawFile 目录下的资源文件会被处理为原生资源包。
首先看UIPrefabs，prefab的上层文件夹就是一个模块，所以希望同一个模块的prefab都打到一个资源包中，使用
PackTopDirectory。
FilterRule CollectAll 收集目录下的所有资源文件 CollectScene 只收集目录下的场景文件 CollectPrefab 只收集目录下的预制体文件 CollectSprite 只收集目录下的精灵类型的文件
UIPrefabs设置为CollectPrefab
资源构建 资源构建，分别有版本号，构建模式（强制打包，增量打包&hellip;），加密类型，压缩类型，Bundle包的命名风格，以及内建资源选项。
点击打包后，会生成几种关键的文件
bundle后缀的就是资源文件，这里包含了指定打包的prefab文件，和一个依赖引用的图片bundle。
PackageManifest开头的是资源清单文件，只是格式不同，这里打开json后缀的查看一下。
可以看到记录了一些打包的信息。
第一部分是打包的基本信息。
第二部分是资源列表，加载的时候就是从资源列表去找到对应的Bundle，因为只有Prefab设置为MainAssetCollector，所以资源列表只有下面的LoginView.prefab。
可以看到这个资源处于Bundle0中，也就是下面的assets_content_ui_prefabs_login.bundle，又依赖了share_assets_content_ui_images_login.bundle即图片文件。
初始化和加载 编辑器模拟模式
单机运行模式
联机运行模式
WebGL运行模式
这里使用单机运行模式，如果使用联机运行模式需要CDN和指定更多的初始化参数，具体参考官方教程。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void Start() { // 初始化资源系统 YooAssets.]]></description>
</item>
<item>
    <title>利用ActionManger拓展psd2gui</title>
    <link>https://dandkong.github.io/%E5%88%A9%E7%94%A8actionmanger%E6%8B%93%E5%B1%95psd2gui/</link>
    <pubDate>Sat, 16 Mar 2024 20:14:29 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E5%88%A9%E7%94%A8actionmanger%E6%8B%93%E5%B1%95psd2gui/</guid>
    <description><![CDATA[前言 游戏的UI制作一直是程序员的考验，如果是程序员来拼UI的话，会遇到和美术效果不一样，如果是美术拼的话，又需要成本，美术一般对Unity不是很熟悉。之前也用过FGUI，但是bug不少，实际上用起来还是UGUI更为顺手。最后项目试用了PSD2GUI这个思路，把美术出的PSD直接转换成UGUI。理想的情况下是不用美术培训太多就能输出界面，所以没有做过多的组件支持，只是导出一些最基础的元素，比如图片和文字，程序在这基础上再进行加工，但也能省去大部分的重复工作了，而且不容易出错。如果流程更加成熟，可以培训美术理解更多prefab相关知识，可以支持导出一些列表，复选框之类的元素，但这要考虑成本。
代码基本来自https://github.com/zs9024/quick_psd2ugui/tree/master，基本没有用他的命名方式，只用了基本的图片和文字导出，支持了位置，大小，文本，文本颜色，透明度等基础信息。在实际实用中美术会标注一些不常规的情况，比如描边，渐变，图片的叠色，旋转，这些信息其实在PSD都有的，但是在API中并不能获取到，最后才参考【CEP教程-8】Action Manager从好奇到劝退 - 中篇，直接读取了图层效果里的描边和图片叠色，因为是直接读取的，所以美术并没有学习成本，渐变的参数过于复杂，有点难支持，旋转的信息暂时没找到简单方法获取，但也省下了一点成本。
代码 主要就是利用ActionManger获取更多的PSD图层信息，PS在操作时会把数据都存到一个的结构中，只要能拿到这个结构，就能查到其中记录的数据，之后通过debug查看变量，或者通过示例代码照猫画虎即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 /** * 这里就是拓展内容 function exportLabel(obj,validFileName){ var desc = getLayerInfoByID(obj.]]></description>
</item>
<item>
    <title>Unity开发性能优化总结</title>
    <link>https://dandkong.github.io/unity%E5%BC%80%E5%8F%91%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sat, 08 Jul 2023 11:24:17 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/unity%E5%BC%80%E5%8F%91%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[Unity开发性能优化总结 1. 前言 工作几年，大部分的时间还是在业务开发，但是业务开发中也是要注意性能，如果不注意性能，积少成多可能也会导致游戏性能的下降。下面总结下自己理解到的性能注意项。
2. 编程和代码架构 2.1 lua使用的性能注意 交互原理：取值、入栈、c#到lua的类型转换，还有内存分配和GC。 lua与C#交互，做好缓存，减少如gameobject.transform.position.x之类的操作，可以在C#封装成GameObejct.GetPosX() 在lua中引用c#的object，代价昂贵 lua和c#之间传参、返回时，尽可能不要传递Vector3/Quaternion等unity值类型，数组等 参见：Unity+Lua性能优化（Lua和C#交互篇）-腾讯游戏学堂 (tencent.com) lua自身使用，减少全局表的查找，减少全局变量 lua与C#交互原理：wlgys8/UnityLuaInteractDemo: Unity中c#与lua的交互原理和用例 (github.com) 2.2 减少字符串的使用 字符串使用性能较差，主要是在传值或者操作时都会有临时变量的产生，引发GC。 代码中减少字符串的拼接，拆分等操作，在Update中尤其需要注意。 使用hash替代字符串传值，参考Unity组件Animator、Material、Shader实现，对于固定的string，用一个字典存下所有字符串，统一转成hash再调用。 2.3 缓存 GameObjects 和组件 GameObject.Find、GameObject.GetComponent 和 Camera.main都会有较大的性能负担，尽量只在初始化时调用，缓存下来使用。 2.4 对象池 对象池包括类和GameObject，使用对象池可减少了实例化和销毁带来的性能消耗，减少托管内存分配的次数、防止产生垃圾回收。 注意对象池的缓存上限，没有上限的话对内存会有负担。 2.5 使用正确的数据结构 注意list，dict等的使用，查找数据的时候尽量减少遍历，可以使用字典查找，降低复杂度。 2.6 减少每帧的代码量 Update每帧执行，不一定所有的代码调用都需要在里面调用。 对于需要定时执行的逻辑也不一定要每帧执行，如倒计时，可以每秒执行，定期执行。 2.7 其他 减少日志的打印，日志打印同样会有字符串的消耗，封装好的打印方法还会进行本地的写法，无用的日志就不要打印了。 3. UI优化手段 3.1 减少渲染的量级和少内存 避免过重UI，拆分成小UI，动态加载 需要响应Raycast事件时，不要使用空Image，可以自定义组件继承自MaskableGraphic，重写OnPopulateMesh把网格清空，这样可以响应Raycast而又不需要绘制Mesh 3.2 减少OverDraw 减少UI重叠 全屏UI隐藏后面的UI 关掉场景相机的渲染 慎用Mask组件（浅谈Unity uGUI Mask组件实现原理 (rugbbyli.gitlab.io),Unity中的Mask组件增加DrawCall的原因unity mask组件流浪打工人的博客-CSDN博客） 慎用Shadow与Outline组件，顶点过多（慎用Outline ,UGUI Outline实现原理分析__Captain的博客-CSDN博客） 简单的粒子特效 3.3 图集 不同的图集/材质会产生DrawCall，且会引起加载问题 3.4 其他 避免频繁调用SetActive方法，会导致网格重建，会导致内存分配，触发GC，可以设置layer或把渲染移到相机外 3.]]></description>
</item>
<item>
    <title>根据Prefab自动生成Lua代码</title>
    <link>https://dandkong.github.io/%E6%A0%B9%E6%8D%AEprefab%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90lua%E4%BB%A3%E7%A0%81/</link>
    <pubDate>Wed, 07 Jun 2023 21:01:30 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E6%A0%B9%E6%8D%AEprefab%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90lua%E4%BB%A3%E7%A0%81/</guid>
    <description><![CDATA[1 前言 最近回到了新项目，发现UI框架还是旧的那一套，每个UI控件，比如Text、Button等，都要手动打代码Find一遍，每次开发都会做很多无用功，所以打算优化一下效率。
设想是做一套工具，可以自动把UI代码生成出来。需求如下
把UI层和逻辑层的代码分开，第一次导出时才导出逻辑层，后续只导出覆盖UI层。 能对自动Button，Toggle等组件加上回调，由逻辑层复写 能控制是否导出子节点 能对BaseView和UIComponent分开导出 变量命名检测，重名自动改名 不影响旧代码 自动添加UIComponent的引用 思路
增加一个C#配置类（UIExportConfig），挂载在prefab上，表示需要导出成哪种代码类型（视图/组件）。 配置每种控件需要怎么导出，是否需要校验名字（因为有些不需要获取，比如界面中的固定图片和文本是不需要导出的）。 递归导出带UIExportConfig的GameObject。 2 UI结构 UI里面主要有两个概念，视图和组件，都由一个基类派生而来，在游戏中体现为一个单独的prefab。
2.1 组件 组件UI逻辑的最小单位，比如背包中的背包页和仓库页就是两个组件，背包页和仓库页中的道具格子也是一个组件。
2.2 视图 视图也是组件，表现为游戏中的一个独立界面，比如一个背包界面，一个玩法界面，由自身以及嵌套的组件实现其不同功能，实现解耦和复用的目的。
3 实现 一个组件，对应一个prefab，会导出一个以“UI”为后缀的UI类，如下：
1 2 3 4 5 6 7 8 ---BagViewUI.lua --基础节点 self.txtTitle = self:FindCom(&#34;Text&#34;,&#34;textTitle&#34;) self.img1 = self:FindCom(&#34;Image&#34;,&#34;textTitle/img1&#34;) --背包页子组件 self.bagCom = BagCom.New(self:Find(&#34;BagCom&#34;) --仓库页子组件 self.storgeCom = StorgeCom.New(self:Find(&#34;StorgeCom&#34;) UI类会被逻辑类引用，如下：
1 2 3 4 5 ---BagView.lua self.ui = BagViewUI.New(self.gameObject) self.ui.txtTitle.text = &#34;背包&#34; self.bagCom:SetData(背包数据); self.storgeCom :SetData(仓库数据); 3.1 导出图片，按钮，文本等组件 脚本通过深度遍历的方式遍历prefab的每个节点，对于合适的节点，生成一句查找代码，类似：]]></description>
</item>
<item>
    <title>状态同步与帧同步</title>
    <link>https://dandkong.github.io/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5/</link>
    <pubDate>Thu, 11 May 2023 21:35:54 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%B8%A7%E5%90%8C%E6%AD%A5/</guid>
    <description><![CDATA[1. 状态同步 服务端接受客户端的操作，计算逻辑，分发到各客户端，游戏世界玩家没有属性变化，基本不会进行同步消息下发。
优点 服务端可靠 断线重连简单，把当前状态下发 缺点 回放需要单独的服务器，保存所有的状态，按时间发 服务器压力大，计算多 开发复杂 2. 帧同步 服务端只做转发操作，转发各个客户端，大多数帧同步的逻辑是只放在每个客户端的，无论是否有操作，每一帧都会有服务器数据下发。
优点 回放简单，只要把操作都记录下来就好 开发简单 缺点 不安全，客户端能篡改 断线重连需要把之前所有操作加速一遍 注意随机数每次都一样 3. 状态帧同步 状态帧同步就是状态同步和帧同步的概念相结合。客户端向服务器上传操作，服务器跑逻辑，但是又在按照固定的每一帧下发所有玩家的状态（属性位置等）给每一个客户端实现同步。客户端做预测，服务端做校验，不正确就回滚数据。
4. 参考 https://zhuanlan.zhihu.com/p/36884005 https://www.cnblogs.com/October2018/p/16120681.html ]]></description>
</item>
<item>
    <title>游戏输入模块</title>
    <link>https://dandkong.github.io/%E6%B8%B8%E6%88%8F%E8%BE%93%E5%85%A5%E6%A8%A1%E5%9D%97/</link>
    <pubDate>Tue, 13 Dec 2022 21:10:37 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E6%B8%B8%E6%88%8F%E8%BE%93%E5%85%A5%E6%A8%A1%E5%9D%97/</guid>
    <description><![CDATA[概述 输入模块是游戏中的基础功能，主要有以下功能
为多平台提供统一接口支持，如移动设备和PC 触发开始按下，按下，抬起事件 区分点击UI和点击场景中的物体，执行不一样的逻辑 支持多点触控 多平台 PC上鼠标操作：Input.GetMouseButton(index) 移动设备：Input.GetTouch(index) 判断点击在UI上 主要用到EventSystem中的RaycastAll接口，参考https://blog.csdn.net/u013012420/article/details/106999229
1 public void RaycastAll(EventSystems.PointerEventData eventData, List&lt;RaycastResult&gt; raycastResults); 点击流程 ]]></description>
</item>
<item>
    <title>人物移动模块</title>
    <link>https://dandkong.github.io/%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8%E6%A8%A1%E5%9D%97/</link>
    <pubDate>Mon, 12 Dec 2022 19:51:11 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E4%BA%BA%E7%89%A9%E7%A7%BB%E5%8A%A8%E6%A8%A1%E5%9D%97/</guid>
    <description><![CDATA[一、概述 游戏中角色移动分为了主动和被动，主动主要由玩家通过摇杆或者键盘进行操作，被动移动主要应用于自动寻路，通过寻路点行动。
二、主动移动 移动组件 移动组件主要用到Unity的移动组件Character Controller，主要属性如下
Height角色的高度，通常和现实中的人物一样设置为2米左右。 Radius角色的半径，用于控制人物的胖瘦。 Center设置角色中心点的位置。 Slope Limit限制角色能爬的最大坡度。通常设置为90度以下，这样角色就不会走到墙上。 Step Offset移动步长。通常2米左右的人移动步长设置在0.1到0.4米. Skin Width皮肤厚度。如果这个值太小角色容易被卡住，太大角色容易抖动。通常将这个数据设为0.01到角色半径的10%之间。 Min Move Distance最小移动距离。官方推荐把这个值设为0。 isGrounded可以获取角色当前是否在地面。 velocity可以获取角色当前的速度向量。 移动方法主要用到Move，Move方法需要自己实现重力的效果，看具体项目需求
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //用摇杆控制方向，当按下空格键时跳起。 using UnityEngine; using System.Collections; public class ExampleClass : MonoBehaviour { public float speed = 6.0F; public float jumpSpeed = 8.0F; public float gravity = 20.]]></description>
</item>
<item>
    <title>UGUI对比FGUI</title>
    <link>https://dandkong.github.io/ugui%E5%AF%B9%E6%AF%94fgui/</link>
    <pubDate>Fri, 18 Nov 2022 21:02:40 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/ugui%E5%AF%B9%E6%AF%94fgui/</guid>
    <description><![CDATA[前言 UI是游戏中很重要的一部分，工作大多是繁复的，所以有一套功能强大，操作简单直观的UI解决方案是非常有必要的。
上半年一直在用FGUI，和之前用的UGUI相比下来，各有优缺点，对比分析记录一下。
一、介绍 UGUI UGUI是Unity原生提供的UI方案，提供了基本的UI组件，如图片，文本，按钮，复选框，进度条等等，正是因为UGUI是面向普遍开发，所以没有封装很多高级的组件，比如虚拟列表。
FGUI FairyGUI（下来简称FGUI）号称易上手，直观，零代码，有一个独立的编辑器，封装了很多高级的UI组件，用起来不需要自己造轮子。
二、编辑器使用体验 UGUI 优点：稳定。
缺点：因为集成在Unity中，资源管理不太方便，需要项目定好规范，编写工具提交效率。
FGUI 优点：有单独的编辑器，所有资源统一管理，美术策划也能很快上手使用。
缺点：不稳定，经常会莫名卡住，导出的时候经常报错。
三、基础组件 基础组件上面因为FGUI实现很多的高级功能，所以使用起来体验要么一样，要么好点。
文本 FGUI文本支持ubb语法，富文本支持图文混排，超链接等等，自动大小的文本。
列表 FGUI实现了虚拟列表，树列表。
字体 字体上FGUI提供了工具制作美术字，只要把资源拖进去专用的编辑器就能很快做出一个美术字体。
动效系统 两者都有动效系统，UGUI上叫Animation，功能上差不多，都很强大。
四、对齐系统 对齐系统这一块，FGUI是很大的亮点。
UGUI UGUI的锚点系统以中心点为基准，对父节点对齐，提供了上下左右，拉伸对齐方式。
**优点：**简单直观UI默认的中心点在中心，符合人的正常思维。
缺点：不够灵活；同级UI之前的关联对齐要依赖其他布局组件；缺乏针对同级元素的对齐工具，不过可以自己拓展实现，可以参考我的另一篇文章。
FGUI 优点：FGUI的对齐系统叫做关联系统，第一个优点是不局限与与父节点对齐，可以对任意两个元素进行对齐。第二个优点是在拓展了对齐的维度，可以以上下左右边缘为基准，可以以上下左右为基准拉伸，复杂一点，但是学会以后可以很方便实现一些效果，比如一张图片随着文字的变长而往右移动。
缺点：垂直布局和水平布局功能太单一；锚点在左上角各种反人类。
五、FGUI特色功能 资源引用查找工具 可以轻易找到组件（图片）和其他组件的引用关系。
支持多国语言 原生支持多国语言，可以导出xml维护即可。
控制器系统 控制器系统一般用于控制显示一些UI元素的状态，可以配合动效和Tab使用，UGUI一般要通过代码控制或者自己实现一个类似的系统。
多平台 FGUI可以一套UI，应用到不同的游戏引擎去，比如Unity和Unreal，对于后期可能更换引擎的项目，节省掉很多成本。
插入3D物体 支持在UI层中插入任何3D物体，例如模型、粒子、骨骼动画等，UGUI中要通过修改特效和UI的渲染顺序实现，比较麻烦。
六、拓展性 两者都有拓展性，FGUI的拓展性在于代码是开源的，可以在底层定制适合项目的功能，但是编辑器是不开源的，所以编辑器里面的东西改不了，虽然编辑器提供了脚本拓展支持，但能实现的东西不多。
UGUI的拓展性在于可以轻松地对编辑器进行拓展，也可以加上各种效果，一般也不会动到底层的如网格重构和渲染的代码，真想修改的话可能要和Unity进行合作然后项目搞一个魔改版的Unity。
七、总结 总的来说两种UI解决方案都可以商用，不会有特别大的问题。
要是策划美术拼UI的话，可以选择FGUI，相反要是程序负责的话，两者都可以，但个人感觉Unity上的操作更加熟悉一点，程序员也可以在平时的UI流程中，吸收一些FGUI的思想，做些工具提高UI的开发效率。]]></description>
</item>
<item>
    <title>UGUI对齐工具</title>
    <link>https://dandkong.github.io/ugui%E5%AF%B9%E9%BD%90%E5%B7%A5%E5%85%B7/</link>
    <pubDate>Wed, 16 Nov 2022 22:54:00 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/ugui%E5%AF%B9%E9%BD%90%E5%B7%A5%E5%85%B7/</guid>
    <description><![CDATA[前言 上半年的大半年时间都在用FGUI，最近又用回了UGUI，发现FGUI的一些工具还是很高效的，比如对齐工具，想着说移植到UGUI里面去，上网搜了一圈还真有，原理并不复杂，就是进行一些数学计算出最终的位置。
不过也没有完全适合项目需求，针对原项目基础上添加了三个功能，下面介绍一下。
一、撤销功能 原项目的工具在修改后，习惯性就按下Ctrl+Z，发现并不能撤销原来的操作，查询了Unity的API后，发现有个Undo的类，可以实现撤销功能，有很多方法，主要用到了RecordObject，代码如下
1 2 3 4 5 private static void SetTranPos(Transform tran, Vector3 pos) { Undo.RecordObject(tran, &#34;modify posstion&#34;); tran.position = pos; } 二、Selection.GameObjects不是按选择顺序的 API中的Selection.GameObjects用于获取当前选中的物件，数组的顺序和我选择的顺序无关，所以不能实现灵活的对齐，查询网上文章可以用Selection.Objects替代，里面的第一个元素就是Ctrl选中的第一个元素，以此类推，代码如下
1 2 3 4 5 //按选中顺序获取GameObjects private static GameObject[] GetOrderedSelctionObjs() { return Selection.objects.OfType&lt;GameObject&gt;().ToArray(); } 三、添加对父节点对齐 功能就是和标题一样，原项目是没有的，代码如下
1 2 3 4 5 6 7 8 //如果只选中一个，对父节点对齐 if (rects.Count == 1) { if (rects[0].parent != null &amp;&amp; rects[0].parent.GetComponent&lt;RectTransform&gt;() != null) { rects.Insert(0, rects[0].parent.GetComponent&lt;RectTransform&gt;()); } } 四、代码 UGUIAlignusing System.]]></description>
</item>
<item>
    <title>《游戏逻辑思想》学习笔记</title>
    <link>https://dandkong.github.io/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Sat, 12 Nov 2022 20:58:13 &#43;0800</pubDate>
    <author>Dand</author>
    <guid>https://dandkong.github.io/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[前言 这本书忘记从哪里下载了，和别的技术书籍不太一样，大多的内容都比较贴合项目开发，所以有一定的参考价值。
里面有几个章节觉得有收获的，主要是框架的设计，以及一些解决问题的思路，大致做了笔记或者摘录。
一、基础内容交流 代码规范 可读代码：由于动态语言的类型灵活性，可以在变量前加上变量类型简称
正确使用断言与返回 注意什么时候可以为空，不要盲目返回
可拓展接口使用 多参数，下面演示了三种写法，最终应该在保留必要参数的情况下，可选参数做成table
1 2 3 4 5 addModulePower(nModuleId, nPower); addModulePower(nModuleId,nPower,bSyncMsg,bSendEvent, bOnlyBoss) if( tOption &amp;&amp; tOption.bSyncMsg){ //做这个参数该干的事情 } 调试的思维与逻辑 正向和逆向思维，逆向更快 不易复现的bug，埋下日志，下次使用 培养敏锐的异常反应 注意生命周期的创建与销毁
代码修改与重构 我们在项目中秉持一个原则，如果有个接口让你不舒服，比如说多传了几个参数，那么我们一定要提出来，那一定是接口的设计不够简单或者没有提供更简单的接口形式。
优雅的使用外部代码 我们的一个原则就是要尽可能少去直接和引擎进行交互，而是更多的进行局部缓存，把战场拉回到更加通用的逻辑里面。 1 2 3 4 5 6 7 8 9 10 11 12 13 修改后的代码为： let levelSlider = Core.createBitmapByName(&#34;slider_png&#34;); let nSliderX = 0; if(XXX){ nSliderX += 6; } if(XXX){ nSliderX += 8; } if(XXX){ nSliderX -= 2; } levelSlider.]]></description>
</item>
</channel>
</rss>
