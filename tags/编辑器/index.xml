<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>编辑器 on Dand</title>
    <link>https://dandkong.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/</link>
    <description>Recent content in 编辑器 on Dand</description>
    <image>
      <title>Dand</title>
      <url>https://dandkong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dandkong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.123.8</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Mar 2024 20:14:29 +0800</lastBuildDate>
    <atom:link href="https://dandkong.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用ActionManger拓展psd2gui</title>
      <link>https://dandkong.github.io/posts/%E5%88%A9%E7%94%A8actionmanger%E6%8B%93%E5%B1%95psd2gui/</link>
      <pubDate>Sat, 16 Mar 2024 20:14:29 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E5%88%A9%E7%94%A8actionmanger%E6%8B%93%E5%B1%95psd2gui/</guid>
      <description>前言 游戏的UI制作一直是程序员的考验，如果是程序员来拼UI的话，会遇到和美术效果不一样，如果是美术拼的话，又需要成本，美术一般对Unity不是很熟悉。之前也用过FGUI，但是bug不少，实际上用起来还是UGUI更为顺手。最后项目试用了PSD2GUI这个思路，把美术出的PSD直接转换成UGUI。理想的情况下是不用美术培训太多就能输出界面，所以没有做过多的组件支持，只是导出一些最基础的元素，比如图片和文字，程序在这基础上再进行加工，但也能省去大部分的重复工作了，而且不容易出错。如果流程更加成熟，可以培训美术理解更多prefab相关知识，可以支持导出一些列表，复选框之类的元素，但这要考虑成本。
代码基本来自https://github.com/zs9024/quick_psd2ugui/tree/master，基本没有用他的命名方式，只用了基本的图片和文字导出，支持了位置，大小，文本，文本颜色，透明度等基础信息。在实际实用中美术会标注一些不常规的情况，比如描边，渐变，图片的叠色，旋转，这些信息其实在PSD都有的，但是在API中并不能获取到，最后才参考【CEP教程-8】Action Manager从好奇到劝退 - 中篇，直接读取了图层效果里的描边和图片叠色，因为是直接读取的，所以美术并没有学习成本，渐变的参数过于复杂，有点难支持，旋转的信息暂时没找到简单方法获取，但也省下了一点成本。
代码 主要就是利用ActionManger获取更多的PSD图层信息，PS在操作时会把数据都存到一个的结构中，只要能拿到这个结构，就能查到其中记录的数据，之后通过debug查看变量，或者通过示例代码照猫画虎即可。
/** * 这里就是拓展内容 function exportLabel(obj,validFileName){ var desc = getLayerInfoByID(obj.id) var json = ADToJSON(desc) //这里就可以取到描边信息类似json.FrameX.solidFill.color，具体debug可以看到 } */ /** * 这个函数接受一个AD的对象，返回这个对象所有属性值的JSON结构 * @param desc [ActionDescriptor] * @constructor * @return JSON */ function ADToJson(desc) { var json = {}; for (var i=0; i&amp;lt;desc.count; i++) { var typeID = desc.getKey(i); var stringID = typeIDToStringID(typeID); var typeString = (desc.getType(typeID)).toString(); switch(typeString) { case &amp;#34;DescValueType.BOOLEANTYPE&amp;#34;: json[stringID] = desc.getBoolean(typeID); break; case &amp;#34;DescValueType.</description>
    </item>
    <item>
      <title>根据Prefab自动生成Lua代码</title>
      <link>https://dandkong.github.io/posts/%E6%A0%B9%E6%8D%AEprefab%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90lua%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 07 Jun 2023 21:01:30 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%A0%B9%E6%8D%AEprefab%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90lua%E4%BB%A3%E7%A0%81/</guid>
      <description>根据Prefab自动生成Lua代码，添加按钮回调，添加组件引用，添加自定义代码。</description>
    </item>
    <item>
      <title>副本逻辑框架</title>
      <link>https://dandkong.github.io/posts/%E5%89%AF%E6%9C%AC%E9%80%BB%E8%BE%91%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Fri, 09 Dec 2022 13:37:15 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E5%89%AF%E6%9C%AC%E9%80%BB%E8%BE%91%E6%A1%86%E6%9E%B6/</guid>
      <description>概述 一般副本中都会包括各种各样的行为和判断逻辑，下面举一个简单的副本例子，进入副本后，如果组队人数到达三个，则刷出怪物，播放特效，播放对话，与怪物战斗后，弹出结算UI，再播个动画。 如果由策划出完案子后程序负责直接实现的话，每个副本都是定制化的，写起来非常难受，而且维护极不方便，一旦需求改动就要重新写代码 所以需要设计一套副本系统可以灵活配置副本功能，想法是把副本里的每个行为，判断都作为一个节点，类型行为树的概念，从开始节点一直执行到结束节点，这个副本进程就结束了，进入下个副本进程。 编辑器使用连线的方式操作，每个节点的前后置关系，导出lua配置供程序使用，服务端控制执行流程，客户端只需要执行节点逻辑。 例子 节点可以分为执行节点和判断节点，执行节点执行一个行为，流程推进，判断节点在符合条件的时候，推进流程，否则暂停。 端口定义了每个节点间的关系，也就是图中的连线，控制流程走向，比如刷怪战斗节点，输入端口连接“判断组队人数”，有两个输出端口，分别是胜利和失败，连接对应的节点。 把副本流程解构成一个个节点以后，只需要维护节点的行为和端口逻辑即可，组合由策划完成，只有在添加新节点时程序才需要上场。 编辑器 编辑器可以用网上的开源例子xnode组织节点，也可自己实现。 导出的数据包括了节点的类型，参数，前后置节点等一切代码需要的信息。 副本流程 服务端推送当前节点信息 服务端执行/客户端执行 服务端/客户端完成节点，推进流程 直到到达结束节点 </description>
    </item>
    <item>
      <title>场景数据框架</title>
      <link>https://dandkong.github.io/posts/%E5%9C%BA%E6%99%AF%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 05 Dec 2022 21:31:39 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E5%9C%BA%E6%99%AF%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/</guid>
      <description>一、概述 一般MMO的游戏由场景和场景中的对象构成，在设计地图时，就会遇到几个问题。怎么有效直观地配置信息，对象都有什么功能，有什么功能是共有的。针对上面的问题，首先需要解决的是抽象出场景对象结构，在此基础上做编辑器，用图形化的界面展示，修改储存数据，供代码使用。
二、场景对象结构 场景本事有数据，如场景资源，组队人数限制等等，这种信息改动不大，也比较直观，一般只要存在excel里面就好，需要的话可以做图形编辑器对excel进行读写和修改。
场景中的对象可以按需分成几类，常见的有npc，采集物，区域，点等等。
NPC NPC主要承载了显示模型的功能，读取NPC表。
采集物 采集物和NPC差不多，只是对话交互改成了点击采集。
区域 区域分成了圆形区域和多边形区域，划分区域可以实现进入和离开区域的逻辑，比如划分了游泳区，飞行区等，进入以后主角切换运动状态。
点 点的功能比较广泛，主要用于定位，也可以添加触发组件以后实现圆形区域的功能。
组件 组件是对象上的属性和功能，公用的组件有缩放，大小，显示隐藏条件等，特殊的组件有巡逻，交互按钮等，按需添加，从而赋予对象特性。
三、场景编辑器 理清了场景对象的结构以后，就可以做编辑器把数据组织起来了，场景编辑器的实现细节不多说，尽量用起来符合直观操作即可，功能如下。
增删改场景信息 直观展示场景中的对象（位置、模型、范围等） 增删改场景中的对象 修改对象的组件属性 导出程序可用数据 四、数据载体 数据可以直接导出lua，也可以导出成json，xml等，只要方便维护，程序方便调用即可。 目前使用的是先储存到excel，再从excel导出到lua中，供程序调用。 使用excel作为中间载体的原因可能是比较直观，但感觉使用json或者Unity序列化的方法也是可行的。 </description>
    </item>
    <item>
      <title>UGUI对齐工具</title>
      <link>https://dandkong.github.io/posts/ugui%E5%AF%B9%E9%BD%90%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 16 Nov 2022 22:54:00 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/ugui%E5%AF%B9%E9%BD%90%E5%B7%A5%E5%85%B7/</guid>
      <description>前言 上半年的大半年时间都在用FGUI，最近又用回了UGUI，发现FGUI的一些工具还是很高效的，比如对齐工具，想着说移植到UGUI里面去，上网搜了一圈还真有，原理并不复杂，就是进行一些数学计算出最终的位置。
不过也没有完全适合项目需求，针对原项目基础上添加了三个功能，下面介绍一下。
一、撤销功能 原项目的工具在修改后，习惯性就按下Ctrl+Z，发现并不能撤销原来的操作，查询了Unity的API后，发现有个Undo的类，可以实现撤销功能，有很多方法，主要用到了RecordObject，代码如下
private static void SetTranPos(Transform tran, Vector3 pos) { Undo.RecordObject(tran, &amp;#34;modify posstion&amp;#34;); tran.position = pos; } 二、Selection.GameObjects不是按选择顺序的 API中的Selection.GameObjects用于获取当前选中的物件，数组的顺序和我选择的顺序无关，所以不能实现灵活的对齐，查询网上文章可以用Selection.Objects替代，里面的第一个元素就是Ctrl选中的第一个元素，以此类推，代码如下
//按选中顺序获取GameObjects private static GameObject[] GetOrderedSelctionObjs() { return Selection.objects.OfType&amp;lt;GameObject&amp;gt;().ToArray(); } 三、添加对父节点对齐 功能就是和标题一样，原项目是没有的，代码如下
//如果只选中一个，对父节点对齐 if (rects.Count == 1) { if (rects[0].parent != null &amp;amp;&amp;amp; rects[0].parent.GetComponent&amp;lt;RectTransform&amp;gt;() != null) { rects.Insert(0, rects[0].parent.GetComponent&amp;lt;RectTransform&amp;gt;()); } } 四、代码 UGUIAlign using System.Collections.Generic; using System.Linq; using UnityEditor; using UnityEngine; public enum AlignType { Top = 1, Left = 2, Right = 3, Bottom = 4, HorizontalCenter = 5, //水平居中 VerticalCenter = 6, //垂直居中 Horizontal = 7, //横向分布 Vertical = 8, //纵向分布 } public class UGUIAlign : Editor { [MenuItem(&amp;#34;GameObject/UI/Align/Left 【左对齐】&amp;#34;)] static void AlignLeft() { Align(AlignType.</description>
    </item>
  </channel>
</rss>
