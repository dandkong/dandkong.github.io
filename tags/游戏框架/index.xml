<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>游戏框架 on Dand</title>
    <link>https://dandkong.github.io/tags/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6/</link>
    <description>Recent content in 游戏框架 on Dand</description>
    <image>
      <title>Dand</title>
      <url>https://dandkong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dandkong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.129.0</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 27 Jul 2024 21:37:10 +0800</lastBuildDate>
    <atom:link href="https://dandkong.github.io/tags/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>游戏框架-Tween</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-tween/</link>
      <pubDate>Sat, 27 Jul 2024 21:37:10 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-tween/</guid>
      <description>前言 Unity 中的补间动画（Tween Animation）是一种在两个关键帧之间自动生成平滑过渡的动画技术。一般在程序动画中使用，如位置、旋转、缩放、颜色等的变化。
这里介绍的框架在这基础上，加入了时间节点（延时执行、反复执行）和行为树的概念，把动画抽象在“节点”概念之下。
节点类型 链式节点 链式节点相当于容器，本身没有具体的执行逻辑，管理了节点列表，在合适的时机标记链式节点为完成状态，根据完成的条件分为以下节点，类似行为树。
顺序节点：按顺序执行节点，上一个节点执行完才执行下一个，全部完成以后标记完成 并行节点：并行执行节点，全部完成以后标记完成 执行节点 执行完回调以后就标记完成
条件节点 Update中判断条件，返回True以后标记完成
时间节点 延后当Timer完成后标记完成，Timer可以简单延迟，也可以反复执行一定次数以后标记完成。
值节点 值节点才是传统意义上的补间动画，就是通过输入时间，计算出值的结果，每帧执行，下面具体介绍。
值节点 值节点主要由两个部分组成，一个是缓动函数，一个是插值函数。
在Update先通过缓动函数，默认为线性函数，根据流逝的时间计算出当前的进度。
再调用插值函数，根据当前进度算出结果值，默认为线性函数。
根据值节点派生出的Color、Vector、Float节点，其实就是插值函数不一样。
缓动函数（Easing Function） 缓动函数是一种用于控制动画或过渡效果速度变化的数学函数。
它的主要作用是使动画或过渡效果看起来更加自然和真实。在没有缓动函数的情况下，动画可能会以恒定的速度进行，显得生硬和不流畅。
缓动函数可以改变动画在不同阶段的速度，常见的效果包括：
加速：动画开始时速度较慢，然后逐渐加快。 减速：动画开始时速度较快，然后逐渐减慢。 先加速后减速：动画开始时加速，然后在接近结束时减速。 先减速后加速：动画开始时减速，然后在中间或接近结束时加速。 //-------------------------------------------------- // Author : David Ochmann // Website：https://easings.net/ //-------------------------------------------------- using System; namespace UniFramework.Tween { /// &amp;lt;summary&amp;gt; /// 公共补间方法 /// &amp;lt;/summary&amp;gt; public static class TweenEase { public static class Linear { public static float Default(float t, float b, float c, float d) { return c * t / d + b; } public static float EaseIn(float t, float b, float c, float d) { return c * t / d + b; } public static float EaseOut(float t, float b, float c, float d) { return c * t / d + b; } public static float EaseInOut(float t, float b, float c, float d) { return c * t / d + b; } } public static class Sine { public static float EaseIn(float t, float b, float c, float d) { return -c * (float)Math.</description>
    </item>
    <item>
      <title>游戏框架-UI管理器</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-ui%E7%AE%A1%E7%90%86%E5%99%A8/</link>
      <pubDate>Tue, 23 Jul 2024 21:26:26 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-ui%E7%AE%A1%E7%90%86%E5%99%A8/</guid>
      <description>前言 UI一般是入门程序员首先接触到的内容，除了业务的开发，还有很多值得研究的地方。
例如共用的组件设计，渲染的效果（如各种文字效果，在UI上显示模型和特效），性能上的优化（如虚拟的滚动列表，UI的动静分离，图集等），还有UI的管理。
这篇文章就来实现一个简单的UI管理器，主要的类就是管理类和窗口类。
框架功能 打开单例UI 加载 层级管理 显隐管理 UI生命周期管理（初始化，打开后，轮询更新，关闭后，销毁） 类图 管理类 管理类是外部调用的入口，打开和关闭窗口，管理UI的层级以及显示隐藏状态。
打开窗口以后，实例化一个对应的类，调用其加载方法
窗口加载完成或者窗口关闭以后回调到管理类中，遍历窗口列表重新设置其深度值，根据是否有全屏窗口，把比全屏窗口以下的窗口都设置为隐藏。
窗口类 窗口类定义了窗口的特性，如是否全屏，所在层级等，按项目需求添加特性。
窗口类中需要复写其生命周期函数，在合适的时机做合适的事情。
一般在初始化时，初始化组件，打开后，显示内容，关闭或者销毁时，做清理。
另外一个值得注意的时，当UI被隐藏的时候，不是使用SetActive(false)，因为这样会引起UI的网格重构，可以把UI移动到一个渲染不到的layer下，或者直接移出相机以外。
打开UI 打开UI时的流程如下
功能拓展 这里只是实现了基础的功能，实际项目中还有许多功能可能用得上，但只需在这基础上拓展即可。
支持面板中的嵌套Prefab：可以在UIWindow给再写一个父类。 打开关闭动画支持：涉及到生命周期的调用实际，需要等待动画完成以后再调用打开关闭方法。 增加缓存：关闭UI时不立即销毁，而且先缓存起来，真正销毁的时机，可以是达到一定的缓存值，或者是存活时机，按实际需要写。 增加通用的遮罩管理。 增加多实例的窗口打开，一个窗口可以多开。 总结 UI管理器基本的功能，以及拓展的功能介绍完了。
实现这些功能不难，但是想要优雅把这些功能都组织起来，让调用简单，代码阅读清晰，也是一门艺术。
参考 UniFramework/UniFramework/UniWindow at main · gmhevinci/UniFramework</description>
    </item>
    <item>
      <title>PuerTS学习路线</title>
      <link>https://dandkong.github.io/posts/puerts%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Wed, 17 Jul 2024 22:07:01 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/puerts%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
      <description>前言 最近看到腾讯又出了个游戏脚本的热更方案，相对lua有以下的优势。
JavaScript生态有众多的库和工具链，结合专业商业引擎的渲染能力，快速打造游戏
相比游戏领域常用的lua脚本，TypeScript的静态类型检查有助于编写更健壮，可维护性更好的程序
安装 安装PuerTS | PUER Typescript
安装包到Unity，在合适的地方接入JSEnv
自定义加载器 PuerTS自带一个加载器，通过Resource加载JS代码，但是实际开发的时候推荐的是TypeScript，需要转译到JS再执行。
编辑器中推荐使用TS-Loader，编辑器中直接使用TS进行开发，没有其他需要关注的地方。
提供一个PuerTS的Loader，使你在Editor下，可以直接读取TS。
无需研究tsconfig、无需研究ESM、CommonJS，无需自行编译ts，无需理会和调试相关的debugpath/sourceMap/控制台跳转。
https://github.com/zombieyang/puerts-ts-loader
编辑器中直接使用TS开发，在发布时还需要编译成JS，参考ts-loader中的TSReleaser-Resources.cs函数，在发布资源前编译成JS。
编译好的JS要支持热更，所以使用默认的加载器，自己定义一个加载器，传入的参数是JS的路径，返回的是JS的代码内容，结合项目的资源加载返回即可，我的Demo使用了YooAssets框架。
调试 用类似NodeJs的方式调试即可。
VSCode Debug 指引 | PUER Typescript
TS学习 TS拥有静态类型检测，能编写更具有健壮性的代码，也有更多现有的资源。
深入理解 TypeScript | 深入理解 TypeScript
Handbook - The TypeScript Handbook
TypeScript 入门教程
ES6 入门教程
前言 | TypeScript手册</description>
    </item>
    <item>
      <title>使用状态机初始化游戏</title>
      <link>https://dandkong.github.io/posts/%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E6%9C%BA%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Sun, 02 Jun 2024 21:14:26 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E6%9C%BA%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B8%B8%E6%88%8F/</guid>
      <description>前言 最近在写游戏demo的时候，在写初始化流程的时候遇到一些问题，一开始通过回调函数来控制初始化流程，并不直观，也不好分离逻辑。进入游戏以后首先是准备好必要的资源，通过YooAssets进行加载，加载完成以后再进行游戏系统的初始化。一开始是在资源加载接口加了回调，加载完以后再进行游戏初始化，但不够优雅，如果需要更多的流程控制会写得比较乱。
最后用状态机实现游戏初始化的流程，首先就是要写一个有限状态机了，参考了一下开源的项目，这里总结一下。
状态机 管理状态：启动，状态转换，管理状态的生命周期 数据处理能力：增删查数据，状态中可以使用这些全局数据 状态 状态定义具体的逻辑，有OnInit,OnEnter,OnUpdate,OnLeave,OnDestroy生命周期。状态内调用状态机进行状态的切换。
UML类图 参考 GitHub - EllanJiang/GameFramework: This is literally a game framework, based on Unity game engine. It encapsulates commonly used game modules during development, and, to a large degree, standardises the process, enhances the development speed and ensures the product quality.
UniFramework/UniFramework at main · gmhevinci/UniFramework</description>
    </item>
    <item>
      <title>游戏输入模块</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E8%BE%93%E5%85%A5%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 13 Dec 2022 21:10:37 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E8%BE%93%E5%85%A5%E6%A8%A1%E5%9D%97/</guid>
      <description>输入模块是游戏中的基础系统，需要封装中间层适配PC平台与移动平台，并提供常用接口。</description>
    </item>
    <item>
      <title>副本逻辑框架</title>
      <link>https://dandkong.github.io/posts/%E5%89%AF%E6%9C%AC%E9%80%BB%E8%BE%91%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Fri, 09 Dec 2022 13:37:15 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E5%89%AF%E6%9C%AC%E9%80%BB%E8%BE%91%E6%A1%86%E6%9E%B6/</guid>
      <description>概述 一般副本中都会包括各种各样的行为和判断逻辑，下面举一个简单的副本例子，进入副本后，如果组队人数到达三个，则刷出怪物，播放特效，播放对话，与怪物战斗后，弹出结算UI，再播个动画。 如果由策划出完案子后程序负责直接实现的话，每个副本都是定制化的，写起来非常难受，而且维护极不方便，一旦需求改动就要重新写代码 所以需要设计一套副本系统可以灵活配置副本功能，想法是把副本里的每个行为，判断都作为一个节点，类型行为树的概念，从开始节点一直执行到结束节点，这个副本进程就结束了，进入下个副本进程。 编辑器使用连线的方式操作，每个节点的前后置关系，导出lua配置供程序使用，服务端控制执行流程，客户端只需要执行节点逻辑。 例子 节点可以分为执行节点和判断节点，执行节点执行一个行为，流程推进，判断节点在符合条件的时候，推进流程，否则暂停。 端口定义了每个节点间的关系，也就是图中的连线，控制流程走向，比如刷怪战斗节点，输入端口连接“判断组队人数”，有两个输出端口，分别是胜利和失败，连接对应的节点。 把副本流程解构成一个个节点以后，只需要维护节点的行为和端口逻辑即可，组合由策划完成，只有在添加新节点时程序才需要上场。 编辑器 编辑器可以用网上的开源例子xnode组织节点，也可自己实现。 导出的数据包括了节点的类型，参数，前后置节点等一切代码需要的信息。 副本流程 服务端推送当前节点信息 服务端执行/客户端执行 服务端/客户端完成节点，推进流程 直到到达结束节点 </description>
    </item>
    <item>
      <title>场景数据框架</title>
      <link>https://dandkong.github.io/posts/%E5%9C%BA%E6%99%AF%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 05 Dec 2022 21:31:39 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E5%9C%BA%E6%99%AF%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6/</guid>
      <description>一、概述 一般MMO的游戏由场景和场景中的对象构成，在设计地图时，就会遇到几个问题。怎么有效直观地配置信息，对象都有什么功能，有什么功能是共有的。针对上面的问题，首先需要解决的是抽象出场景对象结构，在此基础上做编辑器，用图形化的界面展示，修改储存数据，供代码使用。
二、场景对象结构 场景本事有数据，如场景资源，组队人数限制等等，这种信息改动不大，也比较直观，一般只要存在excel里面就好，需要的话可以做图形编辑器对excel进行读写和修改。
场景中的对象可以按需分成几类，常见的有npc，采集物，区域，点等等。
NPC NPC主要承载了显示模型的功能，读取NPC表。
采集物 采集物和NPC差不多，只是对话交互改成了点击采集。
区域 区域分成了圆形区域和多边形区域，划分区域可以实现进入和离开区域的逻辑，比如划分了游泳区，飞行区等，进入以后主角切换运动状态。
点 点的功能比较广泛，主要用于定位，也可以添加触发组件以后实现圆形区域的功能。
组件 组件是对象上的属性和功能，公用的组件有缩放，大小，显示隐藏条件等，特殊的组件有巡逻，交互按钮等，按需添加，从而赋予对象特性。
三、场景编辑器 理清了场景对象的结构以后，就可以做编辑器把数据组织起来了，场景编辑器的实现细节不多说，尽量用起来符合直观操作即可，功能如下。
增删改场景信息 直观展示场景中的对象（位置、模型、范围等） 增删改场景中的对象 修改对象的组件属性 导出程序可用数据 四、数据载体 数据可以直接导出lua，也可以导出成json，xml等，只要方便维护，程序方便调用即可。 目前使用的是先储存到excel，再从excel导出到lua中，供程序调用。 使用excel作为中间载体的原因可能是比较直观，但感觉使用json或者Unity序列化的方法也是可行的。 </description>
    </item>
    <item>
      <title>游戏对象框架</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sun, 27 Nov 2022 08:51:40 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E5%AF%B9%E8%B1%A1%E6%A1%86%E6%9E%B6/</guid>
      <description>概述 游戏对象管理一般是通过总分结构，管理器为RoleMgr，对象为Role，Role的功能由各种功能组件实现，从而实现继承和解耦。
RoleMgr 管理类管理游戏中所有的Role，负责Role的创建、查找、销毁，一般配合UID生成器，给每一个Role分配一个唯一ID作为唯一的标识。
Role Role是游戏中的对象，可以是角色，特效，建筑等等游戏中的一切实体，由BaseRole派生。
BaseRole 基类，定义Role的最基本信息，如GameObject，Transform信息，显示隐藏状态等等。
派生 对BaseRole进行派生就是具体的游戏对象，如添加了控制器以后就是角色，再添加主动移动的控制器以后就是主角，通过绑定不同的组件实现Role的不同方向功能。
Role的功能 Role的功能都由挂载的组件实现，常用的组件有
模型组件 被动移动组件 主动移动组件 显示隐藏组件（多条件） 范围触发组件（当玩家走进时会触发回调） 头顶文本组件 还有各种项目中需要实现的功能 Role的结构 </description>
    </item>
    <item>
      <title>《游戏逻辑思想》学习笔记</title>
      <link>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 12 Nov 2022 20:58:13 +0800</pubDate>
      <guid>https://dandkong.github.io/posts/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>前言 这本书忘记从哪里下载了，和别的技术书籍不太一样，大多的内容都比较贴合项目开发，所以有一定的参考价值。
里面有几个章节觉得有收获的，主要是框架的设计，以及一些解决问题的思路，大致做了笔记或者摘录。
一、基础内容交流 代码规范 可读代码：由于动态语言的类型灵活性，可以在变量前加上变量类型简称
正确使用断言与返回 注意什么时候可以为空，不要盲目返回
可拓展接口使用 多参数，下面演示了三种写法，最终应该在保留必要参数的情况下，可选参数做成table
addModulePower(nModuleId, nPower); addModulePower(nModuleId,nPower,bSyncMsg,bSendEvent, bOnlyBoss) if( tOption &amp;amp;&amp;amp; tOption.bSyncMsg){ //做这个参数该干的事情 } 调试的思维与逻辑 正向和逆向思维，逆向更快 不易复现的bug，埋下日志，下次使用 培养敏锐的异常反应 注意生命周期的创建与销毁
代码修改与重构 我们在项目中秉持一个原则，如果有个接口让你不舒服，比如说多传了几个参数，那么我们一定要提出来，那一定是接口的设计不够简单或者没有提供更简单的接口形式。
优雅的使用外部代码 我们的一个原则就是要尽可能少去直接和引擎进行交互，而是更多的进行局部缓存，把战场拉回到更加通用的逻辑里面。 修改后的代码为： let levelSlider = Core.createBitmapByName(&amp;#34;slider_png&amp;#34;); let nSliderX = 0; if(XXX){ nSliderX += 6; } if(XXX){ nSliderX += 8; } if(XXX){ nSliderX -= 2; } levelSlider.x -= nSliderX; 选择简单的接口/参数以及尽量少的使用/调用底层接口就是我们所谓的正确的代码使用方式。 代码审查 取出一个管理器对象。然后直接访问了它的成员函数，这是非常不应该行为。第一个是这个成员不应该是公有的，而应该是私有的，它的公有性质破坏了类的封装。
从面试的角度看面试 基础能力，逻辑能力，硬核能力
如何应对代码错误 作为项目的主程，还需要统一思想。这个过程包括要求大家遵循统一的代码命名等，这也是规避错误的一个重要手段。越是相似的代码风格，代码的阅读速度就会越快。
二、逻辑设计模式式讨论 分层设计 事件的派发遵循从下往上：比如M驱动V 依赖性越强的越靠下层 变化的放上层，底层可以互相依赖，逻辑层不允许相互依赖 主动和被动 被动模式，依赖事件，及时，性能消耗少，当被动模式不在能支持复杂逻辑时，可以考虑主动模式 主动模式，依赖轮询，有点像ESC的系统层监听实体层的感觉了。优点在于可以监听多种条件 阻塞和非阻塞 主要用于资源加载，阻塞速度快</description>
    </item>
  </channel>
</rss>
