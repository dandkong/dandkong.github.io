[{"categories":["Unity","学习笔记"],"content":"前言 这本书忘记从哪里下载了，和别的技术书籍不太一样，大多的内容都比较贴合项目开发，所以有一定的参考价值。 里面有几个章节觉得有收获的，主要是框架的设计，以及一些解决问题的思路，大致做了笔记或者摘录。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:1:0","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"一、基础内容交流 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:0","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"代码规范 可读代码：由于动态语言的类型灵活性，可以在变量前加上变量类型简称 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:1","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"正确使用断言与返回 注意什么时候可以为空，不要盲目返回 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:2","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"可拓展接口使用 多参数，下面演示了三种写法，最终应该在保留必要参数的情况下，可选参数做成table addModulePower(nModuleId, nPower); addModulePower(nModuleId,nPower,bSyncMsg,bSendEvent, bOnlyBoss) if( tOption \u0026\u0026 tOption.bSyncMsg){ //做这个参数该干的事情 } ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:3","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"调试的思维与逻辑 正向和逆向思维，逆向更快 不易复现的bug，埋下日志，下次使用 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:4","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"培养敏锐的异常反应 注意生命周期的创建与销毁 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:5","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"代码修改与重构 我们在项目中秉持一个原则，如果有个接口让你不舒服，比如说多传了几个参数，那么我们一定要提出来，那一定是接口的设计不够简单或者没有提供更简单的接口形式。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:6","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"优雅的使用外部代码 我们的一个原则就是要尽可能少去直接和引擎进行交互，而是更多的进行局部缓存，把战场拉回到更加通用的逻辑里面。 修改后的代码为： let levelSlider = Core.createBitmapByName(\"slider_png\"); let nSliderX = 0; if(XXX){ nSliderX += 6; } if(XXX){ nSliderX += 8; } if(XXX){ nSliderX -= 2; } levelSlider.x -= nSliderX; 选择简单的接口/参数以及尽量少的使用/调用底层接口就是我们所谓的正确的代码使用方式。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:7","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"代码审查 取出一个管理器对象。然后直接访问了它的成员函数，这是非常不应该行为。第一个是这个成员不应该是公有的，而应该是私有的，它的公有性质破坏了类的封装。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:8","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"从面试的角度看面试 基础能力，逻辑能力，硬核能力 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:9","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"如何应对代码错误 作为项目的主程，还需要统一思想。这个过程包括要求大家遵循统一的代码命名等，这也是规避错误的一个重要手段。越是相似的代码风格，代码的阅读速度就会越快。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:2:10","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"二、逻辑设计模式式讨论 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:3:0","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"分层设计 事件的派发遵循从下往上：比如M驱动V 依赖性越强的越靠下层 变化的放上层，底层可以互相依赖，逻辑层不允许相互依赖 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:3:1","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"主动和被动 被动模式，依赖事件，及时，性能消耗少，当被动模式不在能支持复杂逻辑时，可以考虑主动模式 主动模式，依赖轮询，有点像ESC的系统层监听实体层的感觉了。优点在于可以监听多种条件 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:3:2","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"阻塞和非阻塞 主要用于资源加载，阻塞速度快 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:3:3","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"统一与非统一 效率没有打到一定程度的影响时，推荐考虑统一性 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:3:4","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"三、框架设计初步 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:4:0","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"基类 存活状态，唯一ID ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:4:1","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"框架代码结构 子类关注的基类接口一定是个空的实现，意味着子类不需要考虑去调用父类同名的接口。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:4:2","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"框架设计 配置化编程：消除重复代码，如协议监听，按钮监听等等 自动化平衡处理：如果没有销毁，帮忙擦下屁股 机制有助于实现全局性的功能，尤其处理大规模需要重复代码的东西 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:4:3","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"框架拓展的思路 基础能力，封装类，继承到框架中 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:4:4","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"四、逻辑设计原理 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:5:0","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"缓存的设计 缓存存放的东西有限，不能所有的东西都放缓存。 缓存应该具备清理功能。 缓存系统应该具备一定的匹配能力。 缓存具备最小保留数量以及预先创建的能力 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:5:1","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"分线漫谈 分线，是将玩家划分到不同的频道中，不同频道的玩家互不可见，且不会互相同步消息。分线在程序方面主要用于减少网络包，在策划层面会有一些其他的应用。分线是基于场景的，我们的可见性，以及消息同步默认以场景为单位。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:5:2","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"五、细节与其他 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:6:0","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"代码管理 大型项目中会遇到一种代码管理模式，基于分层的思想。底层代码会在一个代码库中，项目上层代码会在一个代码库，项目工具代码会在一个代码库。三个代码分别检出构成最终的项目。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:6:1","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"检测与转换 配置检测主要是检测表与表之间的关联性，检测是否存在重复id行，检测值的范围是否正确。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:6:2","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"异常处理 我们需要先划分最小的异常范围，然后在进行少量的异常捕获，在捕获后需要把异常的对象清理掉。这就是整个异常处理的过程。这里需要掌握的是核心的处理方式，就是我们怎么样可安全的处理好一个不确定性能的代码。 try{ //干第一件事 nIndex = 1; //干第二件事 nIndex = 2; //干第三件事 nIndex = 3; }catch{ swtich(nIndex){ case 0: break; case 1: break; case 2: break; } } ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:6:3","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"六、商业环境问题 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:7:0","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"程序负责人的关注 微观： 配置的定义 存储的数据结构定义 通信协议的定义 服务器，客户端模块通用部分的抽离客户端界面公共部分抽离 细节难点的处理 宏观： 内存的稳定 CPU的稳定 网络包量的稳定 程序本身的稳定 兼容性问题 综合： 资源的规划 设计的决策 代码规范的确立 后台（php）交互方式制定 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:7:1","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"报警机制 我们来看看什么情况需要报警。服务器短时间内多次重启需要报警，这种属于比较大的清晰可见的情况。往内一点讨论，当玩家存储的数据存储失败的时候，不一定需要报警。而当多个玩家出现这个情况时，就需要报警了。逻辑本身可能是会发生错误的，但是这种错误可小可大，我们不需要每个错误都去报警，这样会干扰我们正常的开发。我们尝试再加入触发次数这样的条件来定义一个报警事件。当多个玩家在一段时间内发生了多次值得报警的bug的时候，比如存储数据失败，登录失败，充值失败，在游戏中无法移动等情况，我们都可以进行报警。报警采用的游戏处理手段可以是停止新玩家登录，也可以是关服等。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:7:2","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity","学习笔记"],"content":"游戏更新 服务端的更新与客户端的更新如何同时生效，使用版本管理 需要同时生效是因为服务端和客户端都可能更新配置，而配置我们希望是两端读到的都是一样的。服务端的更新我们可以做到瞬间就能生效，但是客户端的代码资源都是放在CDN上，更新生效的时间是不一定的。那么我们可以看到的是同时生效的难题在于客户端资源的生效时间是不确定的。我们需要引入资源的版本机制，就像前面说的缓存更新一样。我们在CDN生效之后，再更新服务端，继而切换资源的版本号，通过这样来达到它们的同时生效。 ","date":"2022-11-12","objectID":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:7:3","tags":["Unity","游戏框架"],"title":"《游戏逻辑思想》学习笔记","uri":"/%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":["Unity"],"content":"总览 捏脸主要是通过复制一份骨骼（称为编辑骨骼）的Transform值，带动蒙皮来实现体型的变化，主要技术点在实现方式，编辑器开发，骨骼数据的组织方式，数据的存取。 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:1:0","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"主要的类和方法 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:2:0","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"CommonCustomizeDNA 自定义部位可以改变的值，包括Transform的各个分量，共9个，加一个整体缩放 public XXX { scaleX, rotaionX ... } ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:2:1","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"CommonCustomizeDNAConfig 自定义部位可以改变的值范围，包括Transform的各个分量，共9个，加一个整体缩放 public XXX { scaleXmin, scaleYmin, ... } ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:2:2","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"BodyCustomizeDNA 预定义的可调节部分，可能作用于单根骨骼，也可以一个参数作用于多个骨骼，也可以改变整体缩放（单独处理） 还包括了自定义的DNA属性 //在z轴方向缩放，改骨骼scale值 [LabelOverride(\"胸腔前后\",\"上身\")] [Range(160,60)] public upperBodyFB; //偏移 [LabelOverride(\"胸部左右\",\"上身\")] [Range(160,60)] public bustOffsetLR； ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:2:3","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"BodyCustomizableSlot 数据类，可编辑的最小单位，主要存数据，包括操作的细项属性，原骨骼，编辑的骨骼 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:2:4","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"BodyCustomizableController 定义每个槽位的信息，包括了名字，操作的骨骼名字，编辑模式（改变自身，改变自身和子对象，改变自身以及非BIP骨骼） 初始化做了 根据固定槽位列表，找到对应的bone 整合固定的槽位列表和自定义的槽位列表 根据上面的数据，按模式生成编辑骨骼，生成一份一模一样的骨骼（Transform信息也一致），放到原骨骼下面，如果编辑模式为修改自己以及子对象，则把原骨骼的子对象都放到编辑骨骼下面。生成一份新的骨骼放在原骨骼的子节点，编辑骨骼可以受到动画和自定义值的双重影响，其子节点能受到自定义值得影响。 把编辑骨骼替换原有骨骼整合到蒙皮中，mesh.bones，使其能够影响蒙皮 ApplyDna方法，主要把配置的值（BodyCustomizeDNA）赋值到可编辑骨骼中 根据BodyCustomizeDNA值对BodyCustomizableSlot的编辑骨骼进行三维度缩放（放大缩小效果） BodyCustomizeDNA的配置值直接对特定BodyCustomizableSlot的编辑骨骼进行旋转处理（偏移效果） 处理自定义槽位的编辑骨骼旋转缩放位置，以及镜像编辑骨骼的旋转缩放位置 LateUpdate中处理某些父子骨骼的位置关系（脖子和头），子骨骼跟着父编辑骨骼走，主要针对BIP骨骼会被anim控制，也希望能受到父编辑骨骼的影响。 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:2:5","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"体型变化实现原理 分三种操作类型 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:3:0","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"1. 整体缩放 改根节点缩放 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:3:1","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"2. 骨骼节点的各方向缩放 直接调scale的分量 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:3:2","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"3. 骨骼节点偏移 左右：直接改旋转值的Y值 localRotation = Quertnion.Euler(0,左右偏移值,0) 上下 localPosition = Quertnion.Euler(0,0,0)*Vetor3.up*上下偏移值 //好像就是等于y值。。 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:3:3","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"数据存取方式 JSON进行存储，打包时用prefab索引起来，读取时也用prefab，后续可以打成二进制，比较省 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:4:0","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"高维控制 实际上就是把多个BodyCustomizableSlot打包成一个集合，可以初始化值，后面再做一下统一的缩放。比如改胖瘦，会同时改动腰部，胸部，大腿手臂等节点。 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:5:0","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"捏脸实现 底层逻辑和捏体型一致，不同点 可以指定部位镜像处理，比如，改了左眼会同时改变右眼 一个部位有多个维度可以调整，代码预先设置好可以调整的细项，比如，对眼睛可以进行旋转平移拉伸共九个维度，加一个整体的缩放 体型可以调整的范围比较粗略，脸部每个部位的细项大多可以调整 ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:6:0","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"几个问题 问：怎么避免受到动画控制器影响 答：复制一个节点用于调整，加入蒙皮 问：复制节点后怎么保证能影响到子节点 答：把非bip节点放到编辑节点下，bip节点在lateupdate中跟随编辑父节点同步位置（好像只同步了位置，没有做旋转和缩放的处理） ","date":"2022-11-12","objectID":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/:7:0","tags":["Unity","模型"],"title":"捏体型方案","uri":"/%E6%8D%8F%E4%BD%93%E5%9E%8B%E6%96%B9%E6%A1%88/"},{"categories":["Unity"],"content":"描述描述","date":"2022-11-12","objectID":"/instantoc/","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"},{"categories":["Unity"],"content":"原理 剔除遮挡+Lod，可以组合使用 相机每帧主动发射射线击中物体，击中后显示，并且重置周期 物体在周期后，主动向相机发射射线，判断是否需要隐藏 相机后的物体。减少DC（CPU压力），减少GPU剔除消耗；被遮挡的物体减少GPU渲染 ","date":"2022-11-12","objectID":"/instantoc/:1:0","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"},{"categories":["Unity"],"content":"IOCCam 每帧根据算法生成的随机点，向视锥体内发射若干条射线，击中以后，显示 并根据距离通过LODGroup切换高低模 参数：每帧发射的射线 不足：射线过多 改进：减少射线，延长周期（物体不主动发起射线） ","date":"2022-11-12","objectID":"/instantoc/:1:1","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"},{"categories":["Unity"],"content":"IOClod 初始化，根据相机距离和包围盒，初始化一个合适的Lod 剔除方法：Render enable设置为false或者修改阴影投射（一定距离内保持阴影，防止穿帮） 原版方案：周期从击中点向相机发射射线，被其他阻挡，则剔除 不足：随机的击中点，可能在侧面，或者后面，会自己把自己剔除掉 改进：击中点取2s中最近的击中点，作为击中点 ","date":"2022-11-12","objectID":"/instantoc/:1:2","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"},{"categories":["Unity"],"content":"LOD 运行时根据机型信息，设置IOClod的lod距离 cullDis，过远的直接隐藏，方法和上面一致 减少GPU需要处理的顶点数 ","date":"2022-11-12","objectID":"/instantoc/:2:0","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"},{"categories":["Unity"],"content":"使用 生成场景时给需要剔除的组件添加IOClod组件 ","date":"2022-11-12","objectID":"/instantoc/:3:0","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"},{"categories":["Unity"],"content":"指标 点面数 峰值点面数 ","date":"2022-11-12","objectID":"/instantoc/:4:0","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"},{"categories":["Unity"],"content":"优点 剔除不需要渲染的物体 根据距离切换LOD模型，甚至剔除 ","date":"2022-11-12","objectID":"/instantoc/:5:0","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"},{"categories":["Unity"],"content":"参考 IOC介绍 ","date":"2022-11-12","objectID":"/instantoc/:6:0","tags":["Unity","LOD","场景"],"title":"InstantOC + LOD","uri":"/instantoc/"}]